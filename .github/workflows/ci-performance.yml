name: CI Performance
on:
  workflow_dispatch:
    inputs:
      runs:
        description: 'Number of performance test runs'
        required: false
        default: '5'
      mode:
        description: 'Classifier mode (observe/enforce)'
        required: false
        default: 'observe'
  schedule:
    - cron: '0 3 * * *'

jobs:
  performance:
    runs-on: macos-latest
    env:
      RUNS: ${{ github.event.inputs.runs || '5' }}
      MODE: ${{ github.event.inputs.mode || (github.ref == 'refs/heads/main' && 'enforce' || 'observe') }}
      WARN_THRESHOLD: '10'
      FAIL_THRESHOLD: '25'
    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq
        run: brew install jq || true

      - name: Run Multi-Metric Performance Classifier
        id: classifier
        shell: zsh {0}
        run: |
          mkdir -p artifacts/metrics docs/badges docs/redesignv2/artifacts/metrics
          # Capture classifier stdout/stderr for downstream status generation
            # (tee preserves ordering for downstream parsing)
          exec > >(tee artifacts/classifier.log) 2>&1
          if [[ -x tools/perf-regression-classifier.zsh ]]; then
            tools/perf-regression-classifier.zsh \
              --runs "${RUNS}" \
              --metrics prompt_ready,pre_plugin_total,post_plugin_total,deferred_total \
              --mode "${MODE}" \
              --warn-threshold "${WARN_THRESHOLD}" \
              --fail-threshold "${FAIL_THRESHOLD}" \
              --json-out artifacts/perf-results.json \
              --baseline-dir artifacts/metrics || EXIT_CODE=$?
            if [[ -f artifacts/perf-results.json ]]; then
              STATUS=$(jq -r '.overall_status // "UNKNOWN"' artifacts/perf-results.json)
              echo "status=$STATUS" >> "$GITHUB_OUTPUT"
              echo "exit_code=${EXIT_CODE:-0}" >> "$GITHUB_OUTPUT"
            fi
          else
            echo '{"error":"missing classifier"}' > artifacts/perf-results.json
          fi
          # Always succeed to allow subsequent artifact/badge steps
          exit 0

      - name: Generate Multi-Metric Performance Badge
        shell: zsh {0}
        run: |
          mkdir -p docs/badges
          if [[ -f artifacts/perf-results.json ]]; then
            STATUS=$(jq -r '.overall_status // "UNKNOWN"' artifacts/perf-results.json)
            WORST_METRIC=$(jq -r '.worst_metric // "unknown"' artifacts/perf-results.json)
            WORST_DELTA=$(jq -r '.worst_delta_pct // 0' artifacts/perf-results.json)
            case "$STATUS" in
              OK|BASELINE_CREATED) COLOR="brightgreen";;
              WARN) COLOR="yellow";;
              FAIL) COLOR="red";;
              *) COLOR="lightgrey";;
            esac
            if [[ "$STATUS" == "OK" || "$STATUS" == "BASELINE_CREATED" ]]; then
              MESSAGE="$STATUS"
            else
              MESSAGE="$STATUS: ${WORST_METRIC} ${WORST_DELTA}%"
            fi
            echo "{\"schemaVersion\":1,\"label\":\"performance\",\"message\":\"${MESSAGE}\",\"color\":\"${COLOR}\"}" > docs/badges/perf.json
          else
            echo '{"schemaVersion":1,"label":"performance","message":"no data","color":"lightgrey"}' > docs/badges/perf.json
          fi

      - name: Generate Badges Summary (perf only)
        shell: zsh {0}
        run: |
          if [[ -x tools/generate-badges-summary.zsh ]]; then
            tools/generate-badges-summary.zsh --output docs/badges/summary.json || true
            cat docs/badges/summary.json || true
          fi

      - name: Update Performance Status JSON
        shell: zsh {0}
        run: |
          mkdir -p docs/redesignv2/artifacts/metrics
          STATE_OPT=""
          if [[ -f docs/redesignv2/artifacts/metrics/perf_classifier_status.json ]]; then
            STATE_OPT="--state docs/redesignv2/artifacts/metrics/perf_classifier_status.json"
          fi
          if [[ -f artifacts/classifier.log ]]; then
            LOGSRC="artifacts/classifier.log"
          else
            LOGSRC="artifacts/perf-results.json"
          fi
          if [[ -x tools/update-performance-status.zsh ]]; then
            tools/update-performance-status.zsh --log "$LOGSRC" $STATE_OPT --json-out docs/redesignv2/artifacts/metrics/perf_classifier_status.json || true
            cat docs/redesignv2/artifacts/metrics/perf_classifier_status.json || true
          else
            echo "update-performance-status.zsh not present; skipping."
          fi

      - name: Sync README Performance Status Block
        shell: zsh {0}
        run: |
          if [[ -x tools/sync-readme-performance-status.zsh ]]; then
            # Non-blocking check (policy can later enforce failure)
            tools/sync-readme-performance-status.zsh --check || echo "README perf status block drift (non-blocking)."
          else
            echo "sync-readme-performance-status.zsh not present; skipping."
          fi

      - name: Generate Performance Streak Badge
        shell: zsh {0}
        run: |
          mkdir -p docs/badges
          if [[ -f docs/redesignv2/artifacts/metrics/perf_classifier_status.json ]]; then
            STREAK_CURRENT=$(grep -E '"ok_streak_current"' docs/redesignv2/artifacts/metrics/perf_classifier_status.json | sed -E 's/.*: *([0-9]+).*/\1/')
            ENFORCE=$(grep -E '"enforce_active"' docs/redesignv2/artifacts/metrics/perf_classifier_status.json | sed -E 's/.*: *(true|false).*/\1/')
            COLOR="blue"
            if [[ "$ENFORCE" == "true" ]]; then COLOR="purple"; fi
            echo "{\"schemaVersion\":1,\"label\":\"perf streak\",\"message\":\"${STREAK_CURRENT} ok\",\"color\":\"${COLOR}\"}" > docs/badges/perf-streak.json
          else
            echo "No perf_classifier_status.json; skipping streak badge."
          fi

      - name: Upload Performance Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-artifacts
          path: |
            artifacts/perf-results.json
            artifacts/metrics/*.json
            artifacts/classifier.log
            docs/redesignv2/artifacts/metrics/perf_classifier_status.json
            docs/badges/perf.json
            docs/badges/perf-streak.json
            docs/badges/summary.json

      - name: Install neomutt (macOS)
        if: always()
        run: brew install neomutt || true

      - name: Enforce Regression Thresholds (enforce mode only)
        if: always()
        shell: zsh {0}
        run: |
          STATUS="${{ steps.classifier.outputs.status || 'UNKNOWN' }}"
          echo "Classifier overall status: $STATUS (mode=$MODE)"
          if [[ "$MODE" == "enforce" ]]; then
            if [[ "$STATUS" == "FAIL" ]]; then
              echo "❌ Performance regression (FAIL) in enforce mode"
              exit 3
            elif [[ "$STATUS" == "WARN" ]]; then
              echo "⚠️ Performance WARN threshold exceeded (enforce mode exit 2)"
              exit 2
            fi
          fi
          echo "Performance status acceptable."

      - name: Send Regression Email (neomutt)
        if: failure() || steps.classifier.outputs.status == 'FAIL'
        env:
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
        run: |
          if command -v neomutt >/dev/null 2>&1 && [[ -n "$ALERT_EMAIL" ]]; then
            STATUS="${{ steps.classifier.outputs.status || 'UNKNOWN' }}"
            {
              echo "Performance classifier status: $STATUS."
              echo 'See artifacts/perf-results.json and artifacts/classifier.log for details.'
            } | neomutt -s '[zsh-refactor] Performance Regression' -- "$ALERT_EMAIL" || true
          else
            echo 'neomutt or ALERT_EMAIL not available; skipping email.'
          fi
