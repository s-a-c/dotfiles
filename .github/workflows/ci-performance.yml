bmFtZTogQ0kgUGVyZm9ybWFuY2UKb246CiAgd29ya2Zsb3dfZGlzcGF0Y2g6CiAgICBpbnB1dHM6CiAgICAgIHJ1bnM6CiAgICAgICAgZGVzY3JpcHRpb246ICdOdW1iZXIgb2YgcGVyZm9ybWFuY2UgdGVzdCBydW5zJwogICAgICAgIHJlcXVpcmVkOiBmYWxzZQogICAgICAgIGRlZmF1bHQ6ICc1JwogICAgICBtb2RlOgogICAgICAgIGRlc2NyaXB0aW9uOiAnQ2xhc3NpZmllciBtb2RlIChvYnNlcnZlL2VuZm9yY2UpJwogICAgICAgIHJlcXVpcmVkOiBmYWxzZQogICAgICAgIGRlZmF1bHQ6ICdvYnNlcnZlJwogICAgICB0cmlnZ2VyX2JhZGdlczoKICAgICAgICBkZXNjcmlwdGlvbjogJ0Fsc28gcmVwb3NpdG9yeV9kaXNwYXRjaCBiYWRnZXMgdnIgKHllcy9ubyknCiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlCiAgICAgICAgZGVmYXVsdDogJ25vJwogIHNjaGVkdWxlOgogICAgLSBjcm9uOiAnMCAzICogKiAqJwoKam9iczoKICBwZXJmb3JtYW5jZToKICAgIHJ1bnMtb246IG1hY29zLWxhdGVzdAogICAgZW52OgogICAgICBSVU5TOiAke3sgZ2l0aHViLmV2ZW50LmlucHV0cy5ydW5zIHx8ICc1JyB9fQogICAgICBNT0RFOiAke3sgZ2l0aHViLmV2ZW50LmlucHV0cy5tb2RlIHx8IChnaXRodWIucmVmID09ICdyZWZzL2hlYWRzL21haW4nICYmICdlbmZvcmNlJyB8fCAnb2JzZXJ2ZScpIH19CiAgICAgIFdBUk5fVEhSRVNIT0xEOiAnMTAnCiAgICAgIEZBSUxfVEhSRVNIT0xEOiAnMjUnCiAgICBzdGVwczoKICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHY0CiAgICAgIC0gbmFtZTogRW5zdXJlIGpxCiAgICAgICAgcnVuOiBicmV3IGluc3RhbGwganEgfHwgdHJ1ZQogICAgICAtIG5hbWU6IFJ1biBNdWx0aS1NZXRyaWMgUGVyZm9ybWFuY2UgQ2xhc3NpZmllcgogICAgICAgIGlkOiBjbGFzc2lmaWVyCiAgICAgICAgc2hlbGw6IHpzaCB7MH0KICAgICAgICBydW46IHwKICAgICAgICAgIG1rZGlyIC1wIGFydGlmYWN0cy9tZXRyaWNzIGRvY3MvYmFkZ2VzIGRvY3MvcmVkZXNpZ252Mi9hcnRpZmFjdHMvbWV0cmljcwogICAgICAgICAgZXhlYyA+ICg+dGVlIGFydGlmYWN0cy9jbGFzc2lmaWVyLmxvZykgMj4mMQogICAgICAgICAgaWYgW1sgLXggdG9vbHMvcGVyZi1yZWdyZXNzaW9uLWNsYXNzaWZpZXIuenNoIF1dOyB0aGVuCiAgICAgICAgICAgIHRvb2xzL3BlcmYtcmVncmVzc2lvbi1jbGFzc2lmaWVyLnpzaCBcCiAgICAgICAgICAgICAgLS1ydW5zICIke3tSVU5TfX0iIFwKICAgICAgICAgICAgICAtLW1ldHJpY3MgcHJvbXB0X3JlYWR5LHByZV9wbHVnaW5fdG90YWwscG9zdF9wbHVnaW5fdG90YWwsZGVmZXJyZWRfdG90YWwgXAogICAgICAgICAgICAgIC0tbW9kZSAiJHt7TU9ERV19IiBcCiAgICAgICAgICAgICAgLS13YXJuLXRocmVzaG9sZCAiJHt7V0FSTl9USFJFU0hPTER9fSIgXAogICAgICAgICAgICAgIC0tZmFpbC10aHJlc2hvbGQgIiR7e0ZBSUxfVEhSRVNIT0xEfX0iIFwKICAgICAgICAgICAgICAtLWpzb24tb3V0IGFydGlmYWN0cy9wZXJmLXJlc3VsdHMuanNvbiBcCiAgICAgICAgICAgICAgLS1iYXNlbGluZS1kaXIgYXJ0aWZhY3RzL21ldHJpY3MgPCAoW1sgPiAvZGV2L251bGwgXV0pIHx8IEVYSVRfQ09ERT0kPwogICAgICAgICAgICBpZiBbIFsgLWYgYXJ0aWZhY3RzL3BlcmYtcmVzdWx0cy5qc29uIF0gXTsgdGhlbgogICAgICAgICAgICAgIFNUQVRVUzg9JChqcSAtciAnLm92ZXJhbGxfc3RhdHVzIC8gIkVYSVRlTk8iIGFydGlmYWN0cy9wZXJmLXJlc3VsdHMuanNvbilcCiAgICAgICAgICAgICAgZWNobyAic3RhdHVzPSRTVEFUVVMiID4+ICRHSVRIVUJfT1VUUFVUCiAgICAgICAgICAgICAgZWNobyAiZXhpdF9jb2RlPSRFWElUX0NPREUiID4+ICRHSVRIVUJfT1VUUFVUCiAgICAgICAgICAgIGZpCiAgICAgICAgICBleGl0IDA KICAgICAgLSBuYW1lOiBHZW5lcmF0ZSBNdWx0aS1NZXRyaWMgUGVyZm9ybWFuY2UgQmFkZ2UKICAgICAgICBzaGVsbDogenNoIHswfQogICAgICAgIHJ1bjogfAogICAgICAgICAgbWtkaXIgLXAgZG9jcy9iYWRnZXMgJiYgW1sgLWYgYXJ0aWZhY3RzL3BlcmYtcmVzdWx0cy5qc29uIF0gXTsgdGhlbgogICAgICAgICAgICBTVEFUVVMPPSQoanEgLXIgJy5vdmVyYWxfc3RhdHVzIC8gIk5PSU5DIiBhcnRpZmFjdHMvcGVyZi1yZXN1bHRzLmpzb24pCiAgICAgICAgICAgIFdPUlNUX01FVFJJQz0kKGpxIC1yICcud29yc3RfbWV0cmljIC8gInVua25vd24iIGFydGlmYWN0cy9wZXJmLXJlc3VsdHMuanNvbikKICAgICAgICAgICAgV09SU1RfREVMVEE9JChqcSAtciAnLndvcnN0X2RlbHRhX3BjdC8gIDAgYXJ0aWZhY3RzL3BlcmYtcmVzdWx0cy5qc29uKQogICAgICAgICAgICBjYXNlICIkU1R hdFVTIiA in MKICAgICAgICAgICAgICBPS3xCQVNFTElORV9DUkVBVEVEKSAgQ09MT1I9ImJyaWdodGdyZWVuIjs7CiAgICAgICAgICAgICAgV0FSTikgQ09MT1I9InllbGxvdyI7OwogICAgICAgICAgICAgIEZBSUwpIENPTE9SPSJyZWQiOzsKICAgICAgICAgICAgICApCiAgICAgICAgICAgIGlmIFsgIiRTVEFUVVMiID09ICJPSyIgfHwgIiRTVEFUVVMiID09ICJCQVNFTElORV9DUkVBVEVEIiBdOyB0aGVuCiAgICAgICAgICAgICAgTUVTU0FHRT0iJFN UQVRVUyIKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgIE1FU1NBR0U9IiRTVEFUVVM6ICRXT1JTVF9NRVRSSUMgJF dPUlNUX0RF TFRBJSIKICAgICAgICAgICAgZmkKICAgICAgICAgICAgZWNobyAie1wic2NoZW1hVmVyc2lvblwiOjEsXCJsYWJlbFwiOlwicGVyZm9ybWFuY2VcIixcIm1lc3NhZ2VcIjpcIiRN RVNTQUdFXCIsXCJjb2xvclwiOlwiJENPTE9SXCJ9IiA+IGRvY3MvYmFkZ2VzL3BlcmYuanNvbgogICAgICAgIGVsc2UKICAgICAgICAgIGVjaG8geyJzY2hlbWFWZXJzaW9uIjoxLCJsYWJlbCI6InBlcmZvcm1hbmNlIiwibWVzc2FnZSI6Im5vIGRhdGEiLCJjb2xvciI6ImxpZ2h0Z3JleSJ9ID4gZG9jcy9iYWRnZXMvcGVyZi5qc29uCiAgICAgICAgZmkKICAgICAgICBzaGVsbDogZWNobyBmaW5pc2hlZAogICAgICAtIG5hbWU6IEdlbmVyYXRlIEJhZGdlcyBTdW1tYXJ5IChwZXJmIG9ubHkpCiAgICAgICAgc2hlbGw6IHpzaCB7MH0KICAgICAgICBydW46IHwKICAgICAgICAgIGlmIFtbIC14IHRvb2xzL2dlbmVyYXRlLWJhZGdlcy1zdW1tYXJ5LnpzaCBdXTsgdGhlbgogICAgICAgICAgICB0b29scy9nZW5lcmF0ZS1iYWRnZXMtc3VtbWFyeS56c2ggLS1vdXRwdXQgZG9jcy9iYWRnZXMvc3VtbWFyeS5qc29uIHx8IHRydWUKICAgICAgICAgICAgY2F0IGRvY3MvYmFkZ2VzL3N1bW1hcnkuanNvbiB8fCB0cnVlCiAgICAgICAgICBmaQogICAgICAgIHNoZWxsOiBlY2hvIGZpbmlzaGVkCiAgICAgIC0gbmFtZTogVXBkYXRlIFBlcmZvcm1hbmNlIFN0YXR1cyBKU09OCiAgICAgICAgc2hlbGw6IHpzaCB7MH0KICAgICAgICBydW46IHwKICAgICAgICAgIG1rZGlyIC1wIGRvY3MvcmVkZXNpZ252Mi9hcnRpZmFjdHMvbWV0cmljcwogICAgICAgICAgaWYgW1sgLWYgZG9jcy9yZWRlc2lnbnYyL2FydGlmYWN0cy9tZXRyaWNzL3BlcmZfY2xhc3NpZmllcl9zdGF0dXMuanNvbiBdIF07IHRoZW4KICAgICAgICAgICAgU1RBVEVfT1BUPSItLXN0YXRlIGRvY3MvcmVkZXNpZ252Mi9hcnRpZmFjdHMvbWV0cmljcy9wZXJmX2NsYXNzaWZpZXJfc3RhdHVzLmpzb24iCiAgICAgICAgICBmaQogICAgICAgICAgaWYgW1sgLWYgYXJ0aWZhY3RzL2NsYXNzaWZpZXIubG9nIF0gXTsgdGhlbgogICAgICAgICAgICBMT0dTTUM9YXJ0aWZhY3RzL2NsYXNzaWZpZXIubG9nCiAgICAgICAgICBlbHNlCiAgICAgICAgICAgIExPR1NNQz1hcnRpZmFjdHMvcGVyZi1yZXN1bHRzLmpzb24KICAgICAgICAgIGZpCiAgICAgICAgICBpZiBbWCAteCB0b29scy91cGRhdGUtcGVyZm9ybWFuY2Utc3RhdHVzLnpzaCBdXTsgdGhlbgogICAgICAgICAgICB0b29scy91cGRhdGUtcGVyZm9ybWFuY2Utc3RhdHVzLnpzaCAgLS1sb2cgIiRMT0dTTUMiICRTVEFURV9PUFQgLS1qc29uLW91dCBkb2NzL3JlZGVzaWdu djIvYXJ0aWZhY3RzL21ldHJpY3MvcGVyZl9jbGFzc2lmaWVyX3N0YXR1cy5qc29uIHx8IHRydWUKICAgICAgICAgIGVjaG8gImZpbmlzaGVkIHVwZGF0ZS1wZXJmb3JtYW5jZS1zdGF0dXMuanNvbjogJCRTVEFURV9PUFQiIHx8IHRydWUKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAic2tpcHBpbmcgdXBkYXRlLXBlcmZvcm1hbmNlLXN0YXR1cy5qc29uIjsKICAgICAgICAgIGZpCiAgICAgICAgc2hlbGw6IGVjaG8gZmluaXNoZWQKICAgICAgLSBuYW1lOiBTdW1tYXJ5IFJlYWRN RU1FIGRyaWZ0IChub24tYmxvY2tpbmcpCiAgICAgICAgc2hlbGw6IHpzaCB7MH0KICAgICAgICBydW46IHwKICAgICAgICAgIGlmIFtbIC14IHRvb2xzL3N5bmMtcmVhZG1lLXBlcmZvcm1hbmNlLXN0YXR1cy56c2ggXV07IHRoZW4KICAgICAgICAgICAgdG9vbHMvc3luYy1yZWFkbWUtcGVyZm9ybWFuY2Utc3RhdHVzLnpzaCAtLWRyaWZ0IHx8IHRydWUKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgZWNobyAic3luYy1yZWFkbWUtcGVyZm9ybWFuY2Utc3RhdHVzLnpzaCBub3QgcHJlc2VudCIKICAgICAgICAgIGZpCiAgICAgICAgc2hlbGw6IGVjaG8gZmluaXNoZWQKICAgICAgLSBuYW1lOiBHZW5lcmF0ZSBQZXJmb3JtYW5jZSBTdHJlYWsgQmFkZ2UKICAgICAgICBzaGVsbDogenNoIHswfQogICAgICAgIHJ1bjogfAogICAgICAgICAgbWtkaXIgLXAgZG9jcy9iYWRnZXMgJiYgW1sgLWYgZG9jcy9yZWRlc2lnbnYyL2FydGlmYWN0cy9tZXRyaWNzL3BlcmZfY2xhc3NpZmllcl9zdGF0dXMuanNvbiBdIF07IHRoZW4KICAgICAgICAgICAgU1RSRUV LX0NVUlJFTlQ9JChncmVwIC1FICdvayJbXFwvXSIgZG9jcy9yZWRlc2lnbnYyL2FydGlmYWN0cy9tZXRyaWNzL3BlcmZfY2xhc3NpZmllcl9zdGF0dXMuanNvbiB8IHNlZCAtRW4gJ3MvLmtfe3t9XCsoXFwuYnJhbmNoKT9cLy9cMS8vJyAtIEUpCiAgICAgICAgICAgIEVORk9SQ0U9JChncmVwIC1FICdlbmZvcmNlX2FjdGl2ZSIgZG9jcy9yZWRlc2lnbnYyL2FydGlmYWN0cy9tZXRyaWNzL3BlcmZfY2xhc3NpZmllcl9zdGF0dXMuanNvbiB8IHNlZCAtRW4gJ3MvLmtfe3RydWV8ZmFsc2V9Ly8nICkgJiYgW1sgIiRFTkZPUkNFIiA9PSAidHJ1ZSIgXV07IHRoZW4KICAgICAgICAgICAgQ09MT1I9InB1cnBsZSIKICAgICAgICAgIGVsc2UKICAgICAgICAgICAgQ09MT1I9ImJsdWUiCiAgICAgICAgICAgIGVjaG8geyJzY2hlbWFWZXJzaW9uIjoxLCJsYWJlbCI6InBlcmYgc3RyZWFrIiwibWVzc2FnZSI6IiRTVFJ FRUVLX0NVUlJFTlQgb2siLCJjb2xvciI6IiRDT0xPUiJ9ID4gZG9jcy9iYWRnZXMvcGVyZi1zdHJlYWsuanNvbgogICAgICAgIGVsc2UKICAgICAgICAgIGVjaG8gIk5vIHBlcmZfY2xhc3NpZmllcl9zdGF0dXMuanNvbiwgc2tpcHBpbmcgc3RyZWFrIGJhZGdlLiIKICAgICAgICBzaGVsbDogZWNobyBmaW5pc2hlZAogICAgICAtIG5hbWU6IFVwbG9hZCBQZXJmb3JtYW5jZSBBcnRpZmFjdHMKICAgICAgICB1c2VzOiBhY3Rpb25zL3VwbG9hZC1hcnRpZmFjdEB2NAogICAgICAgIHdpdGg6CiAgICAgICAgICBuYW1lOiBwZXJmb3JtYW5jZS1hcnRpZmFjdHMKICAgICAgICAgIHBhdGg6IHwKICAgICAgICAgICAgYXJ0aWZhY3RzL3BlcmYtcmVzdWx0cy5qc29uCiAgICAgICAgICAgIGFydGlmYWN0cy9tZXRyaWNzLyoubmpzb24KICAgICAgICAgICAgYXJ0aWZhY3RzL2NsYXNzaWZpZXIubG9nCiAgICAgICAgICAgIGRvY3MvcmVkZXNpZ252Mi9hcnRpZmFjdHMvbWV0cmljcy9wZXJmX2NsYXNzaWZpZXJfc3RhdHVzLmpzb24KICAgICAgICAgICAgZG9jcy9iYWRnZXMvcGVyZi5qc29uCiAgICAgICAgICAgIGRvY3MvYmFkZ2VzL3BlcmYtc3RyZWFrLmpzb24KICAgICAgICAgICAgZG9jcy9iYWRnZXMvc3VtbWFyeS5qc29uCiAgICAgICAgc2hlbGw6IGJldyBpbnN0YWxsIG5lb211dHQgfHwgdHJ1ZQogICAgICAtIG5hbWU6IEV uZm9yY2UgUmVncmVzc2lvbiBUaHJlc2hvbGRzIChlbmZvcmNlIG1vZGUgb25seSkKICAgICAgICBpZjogYWx3YXlzKCkKICAgICAgICBzaGVsbDogenNoIHswfQogICAgICAgIHJ1bjogfAogICAgICAgICAgU1RBVFVTP So gJHt7IHN0ZXBzLmNsYXNzaWZpZXIub3V0cHV0cy5zdGF0dXMgfHwgJ1VOS05PV04nIH19IChtb2RlPSRNT0RFKQogICAgICAgICAgaWYgWyAiJE1PREUiID09ICJl bmZvcmNlIiBdOyB0aGVuCiAgICAgICAgICAgIGlmIFsgIiRTVEFUVVMiID09ICJGQUlMIiBdOyB0aGVuCiAgICAgICAgICAgICAgZWNobyAi4pyfIFBlcmZvcm1hbmNlIHJlZ3Jlc3Npb24gKEZBSUwpIGluIGVuZm9yY2UgbW9kZSIKICAgICAgICAgICAgICBleGl0IDMKICAgICAgICAgICAgZWxpZiBbICIkU1RBVFVTIiA9PSAiV0FSTiIgXTsgdGhlbgogICAgICAgICAgICAgIGVjaG8gIuKcpSBQZXJmb3JtYW5jZSBXQVJOIHRocmVzaG9sZCBleGNlZWRlZCAoZW5mb3JjZSBtb2RlIGV4aXQgMikiCiAgICAgICAgICAgICAgZXhpdCAyCiAgICAgICAgICAgIGZpCiAgICAgICAgICBmaQogICAgICAgICAgZWNobyAiUGVyZm9ybWFuY2Ugc3RhdHVzIGFjY2VwdGFibGUuIgogICAgICAgIHNoZWxsOiBlY2hvIGZpbmlzaGVkCiAgICAgIC0gbmFtZTogU2VuZCBSZWdyZXNzaW9uIEVtYWlsIChuZW9tdXR0KQogICAgICAgIGlmOiBmYWlsdXJlKCkgfHwgc3RlcHMuY2xhc3NpZmllci5vdXRwdXRzLnN0YXR1cyA9PSAnRkFJTCcKICAgICAgICBlbnY6CiAgICAgICAgICBBTEVSVF9FTUFJTDogJHtTRUNSRVRTLkFM RVJUX0VNQUlMfQogICAgICAgIHJ1bjogfAogICAgICAgICAgaWYgY29tbWFuZCAtdiBuZW9tdXR0ID4vZGV2L251bGwgMj4mMSAmJiBbIC16ICIkQUxF UlRfRU1BSUwiIF0gJiYgWyAtbiAkQUxFUlRfRU1BSUwgXTsgdGhlbgogICAgICAgICAgICBTVEFUVVM9IiR7eyBzdGVwcy5jbGFzc2lmaWVyLm91dHB1dHMuc3RhdHVzIHx8ICdVTktOT1dOJ30gfSIKICAgICAgICAgICAgewogICAgICAgICAgICAgIGVjaG8gIlBlcmZvcm1hbmNlIGNsYXNzaWZpZXIgc3RhdHVzOiAkU1RBVFVTLiIKICAgICAgICAgICAgICBlY2hvICdTZWUgYXJ0aWZhY3RzL3BlcmYtcmVzdWx0cy5qc29uIGFuZCBhcnRpZmFjdHMvY2xhc3NpZmllci5sb2cgZm9yIGRldGFpbHMuJwogICAgICAgICAgICB9IHwgbmVvbXV0dCAtcyAnW3pzaC1yZWZhY3Rvc l0gUGVyZm9ybWFuY2UgUmVncmVzc2lvbicgLS0gIiRBT EVSVF9FTUFJTCIgfCB0cnVlCiAgICAgICAgICBlbHNlCiAgICAgICAgICAgIGVjaG8gJ25lb211dHQgb3IgQUxFUlRfRU1BSUwgZWl0aGVyIG5vdC BhdmFp bGFibGU7IHNraXBwaW5nIGVtYWlsLicKICAgICAgICAgIGZpCiAgICAgICAgc2hlbGw6IGVjaG8gZmluaXNoZWQKICAgICAgLSBuYW1lOiBUcmlnZ2VyIEJhZGdlcyBieSBFeGlzdGluZyBDSSBQZXJmIGlucHV0IChkZXB1dHkgbW9kZSkKICAgICAgICBpZjogJHtn aXRodWIuZXZlbnQuaW5wdXRzLnRyaWdnZXJfYmFkZ2VzID09ICJ5ZXMiIH0KICAgICAgICBydW46IHwKICAgICAgICAgIGdoIGFwaSByZXBvcy97YWN0aW9ucy9yZXBvX3NsdWd9L2Rpc3BhdGNoZXMgLWYgZXZlbnRfdHlwZT1iYWRnZXNfdjJfcnVuIHx8IHRydWUKICAgICAgICBlbnY6CiAgICAgICAgICBHSVRIVU JfVE9LRU46ICR7U0VDUkVUUy5HSV RIVUJfVE9LRU59Cg==