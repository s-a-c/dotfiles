# Compliant with [/Users/s-a-c/dotfiles/dot-config/ai/guidelines.md](/Users/s-a-c/dotfiles/dot-config/ai/guidelines.md) v50b6b88e7dea25311b5e28879c90b857ba9f1c4b0bc974a72f6b14bc68d54f49
# Sensitive action: introducing automated secret scanning workflow (security-affecting CI config).
# Policy rule references (file-level):
# - [/Users/s-a-c/dotfiles/dot-config/ai/guidelines/100-security-standards.md](/Users/s-a-c/dotfiles/dot-config/ai/guidelines/100-security-standards.md)
# - Principle of proactive secret exposure prevention (security automation). Exact line numbers not enumerated in current context; referencing full security standards document per orchestration policy requirement.
#
# Purpose:
# - Scan PR diffs and protected branch pushes for committed secrets using Gitleaks.
# - Provide fast feedback ("belt & suspenders") alongside improved .gitignore exclusions (e.g. any `.env/` directory).
# - Fail the workflow if potential secrets are detected, preventing merge until reviewed.
#
# Notes:
# - Uses default Gitleaks rules unless a `.github/gitleaks.toml` is added later.
# - To customize or suppress false positives, commit a config file and set `GITLEAKS_CONFIG_PATH` below.
# - Keeps permissions minimal (principle of least privilege).
# - Uploads (optional) redacted report artifact for auditing.
#
# Future enhancements (optional):
# - Add SARIF upload for Advanced Security (if enabled).
# - Post PR review comments via a follow-up job (requires `pull-requests: write`).
# - Maintain an allowlist (baseline) file to manage legacy findings if repository grows.
#
name: secretScan

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

env:
  # Set to '.github/gitleaks.toml' if you add a custom config.
  GITLEAKS_CONFIG_PATH: '.github/gitleaks.toml'
  # Set to 'true' to limit to the diff range for PRs (faster, may miss context).
  DIFF_ONLY: 'false'

jobs:
  scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout (full history for comprehensive scan)
        uses: actions/checkout@v4
        with:
            # Full history lets Gitleaks evaluate commit history if needed.
            fetch-depth: 0

      - name: Determine scan mode
        id: mode
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${DIFF_ONLY}" == "true" ]]; then
            echo "mode=diff" >> "$GITHUB_OUTPUT"
          else
            echo "mode=full" >> "$GITHUB_OUTPUT"
          fi

      - name: Print context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Mode: ${{ steps.mode.outputs.mode }}"
          echo "Using config path: ${GITLEAKS_CONFIG_PATH:-<default>}"

      - name: Install Gitleaks (action)
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: ${{ env.GITLEAKS_CONFIG_PATH }}
          args: --redact --verbose
        # Note: The action itself will scan the entire repo tree at HEAD by default.

      - name: Diff-only scan (PR) (optional second pass)
        if: steps.mode.outputs.mode == 'diff'
        run: |
          set -euo pipefail
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.sha }}"
          echo "Running diff-only scan: ${BASE_SHA}..${HEAD_SHA}"
          # Use standalone gitleaks binary (installed by previous action on PATH).
          gitleaks detect --redact --log-opts="--no-merges ${BASE_SHA}..${HEAD_SHA}" || echo "DIFF_SCAN_EXIT=$?" >> $GITHUB_ENV

      - name: Consolidate exit codes
        id: consolidate
        run: |
          # Primary action sets its exit code via output (0 clean, non-zero issues).
          ACTION_EXIT="${{ steps.gitleaks.outputs.exitcode }}"
          DIFF_EXIT="${DIFF_SCAN_EXIT:-0}"
          echo "Primary scan exit code: $ACTION_EXIT"
            echo "Diff scan exit code:    $DIFF_EXIT"
          if [[ "$ACTION_EXIT" != "0" || "$DIFF_EXIT" != "0" ]]; then
            echo "issues=true" >> "$GITHUB_OUTPUT"
          else
            echo "issues=false" >> "$GITHUB_OUTPUT"

      - name: Upload redacted report (if available)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-logs
          path: |
            gitleaks.log
            report.json
          if-no-files-found: ignore

      - name: Fail if leaks found
        if: steps.consolidate.outputs.issues == 'true'
        run: |
          echo "::error::Potential secret(s) detected by Gitleaks. Review artifact/report and remediate."
          echo "To suppress false positives add an allowlist or custom rule in .github/gitleaks.toml"
          exit 1

      - name: Success summary
        if: steps.consolidate.outputs.issues == 'false'
        run: echo "No potential secrets detected."

  # Placeholder for future SARIF integration (commented out):
  # sarif:
  #   needs: scan
  #   if: needs.scan.result == 'success'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     security-events: write
  #     contents: read
  #   steps:
  #     - name: Upload SARIF (future enhancement)
  #       run: echo "Add gitleaks SARIF generation & upload when required."
