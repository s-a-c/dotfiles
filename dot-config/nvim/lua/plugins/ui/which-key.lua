-- ============================================================================
-- WHICH-KEY CONFIGURATION
-- ============================================================================
-- Key mapping helper and organization

local wk = require("which-key")

-- Which-key setup with enhanced configuration
wk.setup({
    preset = "modern",
    delay = function(ctx)
        return ctx.plugin and 0 or 200
    end,
    filter = function(mapping)
        -- example to exclude mappings without a description
        return mapping.desc and mapping.desc ~= ""
    end,
    spec = {
        mode = { "n", "v" },
        { "<leader>b", group = "Û∞ì© Buffer", icon = "Û∞ì©" },
        { "<leader>c", group = "Û∞ò¶ Code", icon = "Û∞ò¶" },
        { "<leader>cp", group = "ü§ñ Copilot", icon = "ü§ñ" },
        { "<leader>d", group = "Û∞É§ Debug", icon = "Û∞É§" },
        { "<leader>f", group = "Û∞àû Find", icon = "Û∞àû" },
        { "<leader>g", group = "Û∞ä¢ Git", icon = "Û∞ä¢" },
        { "<leader>h", group = "Û∞õï Harpoon", icon = "Û∞õï" },
        { "<leader>l", group = "Û∞øò LSP", icon = "Û∞øò" },
        { "<leader>n", group = "Û±ûÅ Neorg", icon = "Û±ûÅ" },
        { "<leader>r", group = "Û∞ëï Render", icon = "Û∞ëï" },
        { "<leader>p", group = "Û∞ôÖ Precognition", icon = "Û∞ôÖ" },
        { "<leader>y", group = "Û∞ôá Typr", icon = "Û∞ôá" },
        { "<leader>s", group = "Û∞Üç Search", icon = "Û∞Üç" },
        { "<leader>t", group = "Û∞ô® Terminal", icon = "Û∞ô®" },
        { "<leader>u", group = "Û∞ïå UI/Undo", icon = "Û∞ïå" },
        { "<leader>w", group = "Û∞ñ≤ Window", icon = "Û∞ñ≤" },
        { "<leader>x", group = "Û∞í° Trouble", icon = "Û∞í°" },
        { "<leader>z", group = "Û∞òñ Fold", icon = "Û∞òñ" },
        { "<leader>e", group = "Û∞ôÖ Explorer", icon = "Û∞ôÖ" },

        -- Git submenu organization
        { "<leader>gb", group = "Û∞ò¨ Branch", icon = "Û∞ò¨" },
        { "<leader>gc", group = "Û∞úò Commit", icon = "Û∞úò" },
        { "<leader>gd", group = "Û∞¶ì Diff", icon = "Û∞¶ì" },
        { "<leader>gh", group = "Û∞ä¢ GitHub", icon = "Û∞ä¢" },
        { "<leader>gs", group = "Û∞ì¶ Stash", icon = "Û∞ì¶" },

        -- LSP submenu organization
        { "<leader>lw", group = "Û∞ñ≤ Workspace", icon = "Û∞ñ≤" },

        -- Telescope submenu organization
        { "<leader>ft", group = "Û∞î± Telescope", icon = "Û∞î±" },
        { "<leader>fg", group = "Û∞ä¢ Git", icon = "Û∞ä¢" },
        { "<leader>fl", group = "Û∞øò LSP", icon = "Û∞øò" },

        -- Snacks submenu organization
        { "<leader>sn", group = "üçø Snacks", icon = "üçø" },
    },
    icons = {
        breadcrumb = "¬ª", -- symbol used in the command line area that shows your active key combo
        separator = "‚ûú", -- symbol used between a key and it's label
        group = "+", -- symbol prepended to a group
        ellipsis = "‚Ä¶",
        -- set to false to disable all mapping icons,
        -- both those explicitly added in a mapping
        -- and those from rules
        mappings = true,
        -- use the highlights from mini.icons
        -- When `false`, it will use `WhichKeyIcon` instead
        colors = true,
        -- used by key format
        keys = {
            Up = " ",
            Down = " ",
            Left = " ",
            Right = " ",
            C = "Û∞ò¥ ",
            M = "Û∞òµ ",
            D = "Û∞ò≥ ",
            S = "Û∞ò∂ ",
            CR = "Û∞åë ",
            Esc = "Û±ä∑ ",
            ScrollWheelDown = "Û±ïê ",
            ScrollWheelUp = "Û±ïë ",
            NL = "Û∞åë ",
            BS = "Û∞ÅÆ",
            Space = "Û±Åê ",
            Tab = "Û∞åí ",
            F1 = "Û±ä´",
            F2 = "Û±ä¨",
            F3 = "Û±ä≠",
            F4 = "Û±äÆ",
            F5 = "Û±äØ",
            F6 = "Û±ä∞",
            F7 = "Û±ä±",
            F8 = "Û±ä≤",
            F9 = "Û±ä≥",
            F10 = "Û±ä¥",
            F11 = "Û±äµ",
            F12 = "Û±ä∂",
        },
    },
    win = {
        -- don't allow the popup to overlap with the cursor
        no_overlap = true,
        -- width = 1,
        -- height = { min = 4, max = 25 },
        -- col = 0,
        -- row = math.huge,
        border = "rounded",
        padding = { 1, 2 }, -- extra window padding [top/bottom, right/left]
        title = true,
        title_pos = "center",
        zindex = 1000,
        -- Additional vim.wo and vim.bo options
        bo = {},
        wo = {
            winblend = 10, -- value between 0-100 0 for fully opaque and 100 for fully transparent
        },
    },
    layout = {
        width = { min = 20 }, -- min and max width of the columns
        spacing = 3,          -- spacing between columns
    },
    keys = {
        scroll_down = "<c-d>", -- binding to scroll down inside the popup
        scroll_up = "<c-u>",   -- binding to scroll up inside the popup
    },
    ---@type false | "classic" | "modern" | "helix"
    sort = { "local", "order", "group", "alphanum", "mod" },
    ---@type number|fun(node: wk.Node):boolean?
    expand = 0, -- expand groups when <= n mappings
    -- expand = function(node)
    --   return not node.desc -- expand all nodes without a description
    -- end,
    -- Functions/Lua Patterns for formatting the labels
    ---@type table<string, ({[1]:string, [2]:string}|fun(str:string):string)[]>
    replace = {
        key = {
            function(key)
                return require("which-key.view").format(key)
            end,
            -- { "<Space>", "SPC" },
        },
        desc = {
            { "<Plug>%(?(.*)%)?", "%1" },
            { "^%+",              "" },
            { "<[cC]md>",         "" },
            { "<[cC][rR]>",       "" },
            { "<[sS]ilent>",      "" },
            { "^lua%s+",          "" },
            { "^call%s+",         "" },
            { "^:%s*",            "" },
        },
    },
})

-- ============================================================================
-- WHICH-KEY MAPPINGS
-- ============================================================================

-- Register comprehensive key mappings with which-key

-- Buffer management
wk.add({
    { "<leader>bb", "<cmd>Telescope buffers<cr>", desc = "Û∞ì© List buffers", mode = "n" },
    { "<leader>bd", "<cmd>bdelete<cr>", desc = "Û∞Öñ Delete buffer", mode = "n" },
    { "<leader>bD", "<cmd>bdelete!<cr>", desc = "Û∞Öô Force delete buffer", mode = "n" },
    { "<leader>bn", "<cmd>bnext<cr>", desc = "Û∞í≠ Next buffer", mode = "n" },
    { "<leader>bp", "<cmd>bprevious<cr>", desc = "Û∞íÆ Previous buffer", mode = "n" },
    { "<leader>bf", "<cmd>bfirst<cr>", desc = "Û∞í´ First buffer", mode = "n" },
    { "<leader>bl", "<cmd>blast<cr>", desc = "Û∞í¨ Last buffer", mode = "n" },
    { "<leader>bs", "<cmd>w<cr>", desc = "Û∞Üì Save buffer", mode = "n" },
    { "<leader>bS", "<cmd>wa<cr>", desc = "Û∞Üî Save all buffers", mode = "n" },
    { "<leader>br", "<cmd>e!<cr>", desc = "Û∞ëê Reload buffer", mode = "n" },
    { "<leader>bw", "<cmd>set wrap!<cr>", desc = "Û∞ñ∂ Toggle wrap", mode = "n" },
    { "<leader>bh", "<cmd>nohlsearch<cr>", desc = "Û∞∏± Clear highlights", mode = "n" },
})

-- Find/Search with Telescope
wk.add({
    { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Û∞àû Find files", mode = "n" },
    { "<leader>fs", "<cmd>Telescope grep_string<cr>", desc = "Û∞±Ω Grep string", mode = "n" },
    { "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "Û∞ì© Find buffers", mode = "n" },
    { "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Û∞ãñ Help tags", mode = "n" },
    { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Û∞ãö Recent files", mode = "n" },
    { "<leader>fc", "<cmd>Telescope colorscheme<cr>", desc = "Û∞èò Colorschemes", mode = "n" },
    { "<leader>fk", "<cmd>Telescope keymaps<cr>", desc = "Û∞åå Keymaps", mode = "n" },
    { "<leader>fm", "<cmd>Telescope marks<cr>", desc = "Û∞ÉÄ Marks", mode = "n" },
    { "<leader>fj", "<cmd>Telescope jumplist<cr>", desc = "Û∞ïá Jump list", mode = "n" },
    { "<leader>fq", "<cmd>Telescope quickfix<cr>", desc = "Û∞Å® Quickfix", mode = "n" },
    { "<leader>fw", "<cmd>Telescope grep_string<cr>", desc = "Û∞±Ω Grep word under cursor", mode = "n" },
    { "<leader>fz", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Û∞±º Fuzzy find in buffer", mode = "n" },
    { "<leader>f/", "<cmd>Telescope search_history<cr>", desc = "Û∞ãö Search history", mode = "n" },
    { "<leader>f:", "<cmd>Telescope command_history<cr>", desc = "Û∞ò≥ Command history", mode = "n" },
})

-- Telescope Git integration
wk.add({
    { "<leader>fgg", "<cmd>Telescope git_files<cr>", desc = "Û∞ä¢ Git files", mode = "n" },
    { "<leader>fgs", "<cmd>Telescope git_status<cr>", desc = "Û∞ä¢ Git status", mode = "n" },
    { "<leader>fgc", "<cmd>Telescope git_commits<cr>", desc = "Û∞úò Git commits", mode = "n" },
    { "<leader>fgb", "<cmd>Telescope git_branches<cr>", desc = "Û∞ò¨ Git branches", mode = "n" },
    { "<leader>fgh", "<cmd>Telescope git_stash<cr>", desc = "Û∞ì¶ Git stash", mode = "n" },
})

-- Telescope LSP integration
wk.add({
    { "<leader>flr", "<cmd>Telescope lsp_references<cr>", desc = "Û∞àá LSP references", mode = "n" },
    { "<leader>fld", "<cmd>Telescope lsp_definitions<cr>", desc = "Û∞àÆ LSP definitions", mode = "n" },
    { "<leader>fli", "<cmd>Telescope lsp_implementations<cr>", desc = "Û∞°± LSP implementations", mode = "n" },
    { "<leader>flt", "<cmd>Telescope lsp_type_definitions<cr>", desc = "Û∞úÅ LSP type definitions", mode = "n" },
    { "<leader>fll", "<cmd>Telescope loclist<cr>", desc = "Û∞Å© Location list", mode = "n" },
})

wk.add({
    { "<leader>xx", "<cmd>TroubleToggle<cr>",                       desc = "Toggle Trouble",        mode = "n" },
    { "<leader>xw", "<cmd>TroubleToggle workspace_diagnostics<cr>", desc = "Workspace Diagnostics", mode = "n" },
    { "<leader>xd", "<cmd>TroubleToggle document_diagnostics<cr>",  desc = "Document Diagnostics",  mode = "n" },
    { "<leader>xl", "<cmd>TroubleToggle loclist<cr>",               desc = "Location List",         mode = "n" },
    { "<leader>xq", "<cmd>TroubleToggle quickfix<cr>",              desc = "Quickfix List",         mode = "n" },
    { "<leader>xr", "<cmd>TroubleToggle lsp_references<cr>",        desc = "LSP References",        mode = "n" },
})

wk.add({
    { "<leader>uT", "<cmd>Twilight<cr>", desc = "Toggle Twilight", mode = "n" },
})

wk.add({
    { "<leader>bt", "<cmd>BiscuitsToggle<cr>", desc = "Toggle Biscuits", mode = "n" },
})

wk.add({
    { "<leader>rm", "<cmd>RenderMarkdownToggle<cr>", desc = "Toggle Markdown", mode = "n" },
})

wk.add({
    { "<leader>uS", "<cmd>SmearCursorToggle<cr>", desc = "Toggle Smear Cursor", mode = "n" },
})

wk.add({
    { "<leader>aa", "<cmd>Avante<cr>", desc = "Avante", mode = "n" },
})

-- ============================================================================
-- NEW ESSENTIAL PLUGIN MAPPINGS
-- ============================================================================

-- File Explorer (Oil.nvim)
wk.add({
    { "<leader>e", "<cmd>lua require('oil').open_float()<cr>", desc = "Û∞ôÖ Open file explorer", mode = "n" },
    { "<leader>E", "<cmd>lua require('oil').open()<cr>", desc = "Û∞ôÖ Open file explorer (buffer)", mode = "n" },
})

-- Search and Replace (Spectre)
wk.add({
    { "<leader>ss", "<cmd>lua require('spectre').toggle()<cr>", desc = "Û∞õî Toggle Spectre", mode = "n" },
    { "<leader>sw", "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", desc = "Û∞õî Search current word", mode = "n" },
    { "<leader>sp", "<cmd>lua require('spectre').open_file_search({select_word=true})<cr>", desc = "Û∞õî Search on current file", mode = "n" },
    { "<leader>sw", "<cmd>lua require('spectre').open_visual()<cr>", desc = "Û∞õî Search current word", mode = "v" },
})

-- Enhanced Navigation (Flash.nvim)
wk.add({
    { "s", "<cmd>lua require('flash').jump()<cr>", desc = "Û∞âÅ Flash", mode = { "n", "x", "o" } },
    { "S", "<cmd>lua require('flash').treesitter()<cr>", desc = "Û∞âÅ Flash Treesitter", mode = { "n", "x", "o" } },
    { "r", "<cmd>lua require('flash').remote()<cr>", desc = "Û∞âÅ Remote Flash", mode = "o" },
    { "R", "<cmd>lua require('flash').treesitter_search()<cr>", desc = "Û∞âÅ Treesitter Search", mode = { "o", "x" } },
    { "<c-s>", "<cmd>lua require('flash').toggle()<cr>", desc = "Û∞âÅ Toggle Flash Search", mode = "c" },
})

-- Terminal Management
wk.add({
    { "<leader>tt", "<cmd>lua require('snacks').terminal()<cr>", desc = "Û∞ô® Toggle terminal", mode = "n" },
    { "<leader>tf", "<cmd>lua require('snacks').terminal.open(nil, {cwd = vim.fn.expand('%:p:h')})<cr>", desc = "Û∞ô® Terminal in file dir", mode = "n" },
    { "<leader>tg", "<cmd>lua require('snacks').lazygit()<cr>", desc = "Û∞ä¢ LazyGit", mode = "n" },
})

-- Indentation Guides
wk.add({
    { "<leader>ui", "<cmd>IBLToggle<cr>", desc = "Û∞â∂ Toggle indent guides", mode = "n" },
    { "<leader>us", "<cmd>IBLToggleScope<cr>", desc = "Û∞â∂ Toggle scope guides", mode = "n" },
})

-- Note: This is a partial extraction of the Which-key mappings.
-- The original configuration contains many more mappings for:
-- - LSP operations
-- - Git operations
-- - Debug operations
-- - UI toggles
-- - Terminal operations
-- - Harpoon navigation
-- - Neorg operations
-- - And many more...
--
-- To complete the extraction, continue adding the remaining wk.add() blocks
-- from the original init.lua file (lines ~2100-2323)
