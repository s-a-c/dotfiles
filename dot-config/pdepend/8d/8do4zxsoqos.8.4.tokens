a:2:{s:4:"hash";N;s:4:"data";a:41:{i:0;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:92;s:5:"image";s:5:"<?php";s:9:"startLine";i:1;s:7:"endLine";i:1;s:11:"startColumn";i:1;s:9:"endColumn";i:5;}i:1;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:51;s:5:"image";s:7:"declare";s:9:"startLine";i:3;s:7:"endLine";i:3;s:11:"startColumn";i:1;s:9:"endColumn";i:7;}i:2;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:6;s:5:"image";s:1:"(";s:9:"startLine";i:3;s:7:"endLine";i:3;s:11:"startColumn";i:8;s:9:"endColumn";i:8;}i:3;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:11;s:5:"image";s:12:"strict_types";s:9:"startLine";i:3;s:7:"endLine";i:3;s:11:"startColumn";i:9;s:9:"endColumn";i:20;}i:4;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:19;s:5:"image";s:1:"=";s:9:"startLine";i:3;s:7:"endLine";i:3;s:11:"startColumn";i:21;s:9:"endColumn";i:21;}i:5;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:83;s:5:"image";s:1:"1";s:9:"startLine";i:3;s:7:"endLine";i:3;s:11:"startColumn";i:22;s:9:"endColumn";i:22;}i:6;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:7;s:5:"image";s:1:")";s:9:"startLine";i:3;s:7:"endLine";i:3;s:11:"startColumn";i:23;s:9:"endColumn";i:23;}i:7;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:13;s:5:"image";s:1:";";s:9:"startLine";i:3;s:7:"endLine";i:3;s:11:"startColumn";i:24;s:9:"endColumn";i:24;}i:8;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:137;s:5:"image";s:441:"/*
|--------------------------------------------------------------------------
| Test Case
|--------------------------------------------------------------------------
|
| The closure you provide to your test functions is always bound to a specific PHPUnit test
| case class. By default, that class is "PHPUnit\Framework\TestCase". Of course, you may
| need to change it using the "uses()" function to bind a different classes or traits.
|
*/";s:9:"startLine";i:5;s:7:"endLine";i:14;s:11:"startColumn";i:1;s:9:"endColumn";i:2;}i:9;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:137;s:5:"image";s:52:"// uses(PHPUnit\Framework\TestCase::class)->in('.');";s:9:"startLine";i:16;s:7:"endLine";i:16;s:11:"startColumn";i:1;s:9:"endColumn";i:52;}i:10;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:137;s:5:"image";s:450:"/*
|--------------------------------------------------------------------------
| Expectations
|--------------------------------------------------------------------------
|
| When you're writing tests, you often need to check that values meet certain conditions. The
| "expect()" function gives you access to a set of "expectations" methods that you can use
| to assert different things. Of course, you may extend the Expectation API at any time.
|
*/";s:9:"startLine";i:18;s:7:"endLine";i:27;s:11:"startColumn";i:1;s:9:"endColumn";i:2;}i:11;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:11;s:5:"image";s:6:"expect";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:1;s:9:"endColumn";i:6;}i:12;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:6;s:5:"image";s:1:"(";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:7;s:9:"endColumn";i:7;}i:13;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:7;s:5:"image";s:1:")";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:8;s:9:"endColumn";i:8;}i:14;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:91;s:5:"image";s:2:"->";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:9;s:9:"endColumn";i:10;}i:15;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:11;s:5:"image";s:6:"extend";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:11;s:9:"endColumn";i:16;}i:16;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:6;s:5:"image";s:1:"(";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:17;s:9:"endColumn";i:17;}i:17;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:48;s:5:"image";s:9:"'toBeOne'";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:18;s:9:"endColumn";i:26;}i:18;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:118;s:5:"image";s:1:",";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:27;s:9:"endColumn";i:27;}i:19;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:165;s:5:"image";s:2:"fn";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:29;s:9:"endColumn";i:30;}i:20;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:6;s:5:"image";s:1:"(";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:32;s:9:"endColumn";i:32;}i:21;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:7;s:5:"image";s:1:")";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:33;s:9:"endColumn";i:33;}i:22;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:55;s:5:"image";s:2:"=>";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:35;s:9:"endColumn";i:36;}i:23;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:116;s:5:"image";s:5:"$this";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:38;s:9:"endColumn";i:42;}i:24;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:91;s:5:"image";s:2:"->";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:43;s:9:"endColumn";i:44;}i:25;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:11;s:5:"image";s:4:"toBe";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:45;s:9:"endColumn";i:48;}i:26;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:6;s:5:"image";s:1:"(";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:49;s:9:"endColumn";i:49;}i:27;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:83;s:5:"image";s:1:"1";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:50;s:9:"endColumn";i:50;}i:28;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:7;s:5:"image";s:1:")";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:51;s:9:"endColumn";i:51;}i:29;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:7;s:5:"image";s:1:")";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:52;s:9:"endColumn";i:52;}i:30;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:13;s:5:"image";s:1:";";s:9:"startLine";i:29;s:7:"endLine";i:29;s:11:"startColumn";i:53;s:9:"endColumn";i:53;}i:31;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:137;s:5:"image";s:447:"/*
|--------------------------------------------------------------------------
| Functions
|--------------------------------------------------------------------------
|
| While Pest is very powerful out-of-the-box, you may have some testing code specific to your
| project that you don't want to repeat in every file. Here you can also expose helpers as
| global functions to help you to reduce the number of lines of code in your test files.
|
*/";s:9:"startLine";i:31;s:7:"endLine";i:40;s:11:"startColumn";i:1;s:9:"endColumn";i:2;}i:32;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:9;s:5:"image";s:8:"function";s:9:"startLine";i:42;s:7:"endLine";i:42;s:11:"startColumn";i:1;s:9:"endColumn";i:8;}i:33;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:11;s:5:"image";s:9:"something";s:9:"startLine";i:42;s:7:"endLine";i:42;s:11:"startColumn";i:10;s:9:"endColumn";i:18;}i:34;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:6;s:5:"image";s:1:"(";s:9:"startLine";i:42;s:7:"endLine";i:42;s:11:"startColumn";i:19;s:9:"endColumn";i:19;}i:35;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:7;s:5:"image";s:1:")";s:9:"startLine";i:42;s:7:"endLine";i:42;s:11:"startColumn";i:20;s:9:"endColumn";i:20;}i:36;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:125;s:5:"image";s:1:":";s:9:"startLine";i:42;s:7:"endLine";i:42;s:11:"startColumn";i:21;s:9:"endColumn";i:21;}i:37;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:11;s:5:"image";s:4:"void";s:9:"startLine";i:42;s:7:"endLine";i:42;s:11:"startColumn";i:23;s:9:"endColumn";i:26;}i:38;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:4;s:5:"image";s:1:"{";s:9:"startLine";i:42;s:7:"endLine";i:42;s:11:"startColumn";i:28;s:9:"endColumn";i:28;}i:39;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:137;s:5:"image";s:5:"// ..";s:9:"startLine";i:43;s:7:"endLine";i:43;s:11:"startColumn";i:5;s:9:"endColumn";i:9;}i:40;O:30:"PDepend\Source\Tokenizer\Token":6:{s:4:"type";i:5;s:5:"image";s:1:"}";s:9:"startLine";i:44;s:7:"endLine";i:44;s:11:"startColumn";i:1;s:9:"endColumn";i:1;}}}
