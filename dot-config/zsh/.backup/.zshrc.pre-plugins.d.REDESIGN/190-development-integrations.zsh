#!/usr/bin/env zsh
# 190-DEVELOPMENT-INTEGRATIONS.ZSH - Inlined (was sourcing 65-development-integrations.zsh)
# Compliant with [/Users/s-a-c/dotfiles/dot-config/ai/guidelines.md](/Users/s-a-c/dotfiles/dot-config/ai/guidelines.md) v${GUIDELINES_CHECKSUM:-pending}
if [[ -n ${_LOADED_DEV_INTEGRATIONS_REDESIGN:-} ]]; then return 0; fi
export _LOADED_DEV_INTEGRATIONS_REDESIGN=1
zf::debug "[DEV-INTEGRATIONS] Loading development integrations (v2.0.0)"
_load_direnv(){ zf::dev_load_direnv "$@"; }
if command -v direnv >/dev/null 2>&1; then if command -v lazy_register >/dev/null 2>&1; then lazy_register direnv _load_direnv; zf::debug "[DEV-INTEGRATIONS] direnv registered for lazy loading"; else _load_direnv direnv; fi; else zf::debug "[DEV-INTEGRATIONS] direnv not available"; fi
export GIT_EDITOR="${GIT_EDITOR:-${EDITOR:-vim}}" GIT_PAGER="${GIT_PAGER:-${PAGER:-less}}" GIT_OPTIONAL_LOCKS="${GIT_OPTIONAL_LOCKS:-0}"
if [[ -z ${ZSH_THEME_GIT_PROMPT_PREFIX:-} ]]; then autoload -Uz vcs_info; precmd_functions+=(vcs_info); zstyle ':vcs_info:*' enable git; zstyle ':vcs_info:*' formats ' (%b)'; zstyle ':vcs_info:*' actionformats ' (%b|%a)'; zf::debug "[DEV-INTEGRATIONS] Basic git vcs_info configured"; fi
if command -v git >/dev/null 2>&1; then if ! alias git >/dev/null 2>&1; then _safe_git(){ case $1 in push|pull|fetch) if ! zf::safe_git rev-parse --git-dir >/dev/null 2>&1; then echo 'Error: Not in a git repository' >&2; return 1; fi ;; esac; zf::safe_git "$@"; }; if [[ ${GIT_SAFE_MODE:-0} == 1 ]]; then alias git=_safe_git; zf::debug "[DEV-INTEGRATIONS] Safe git wrapper enabled"; fi; fi; zf::debug "[DEV-INTEGRATIONS] Git configuration applied"; fi
_load_github_copilot(){ local cmd=$1; zf::debug "[DEV-INTEGRATIONS] Loading GitHub Copilot for command: $cmd"; if command -v gh >/dev/null 2>&1; then if gh extension list 2>/dev/null | grep -q github/gh-copilot; then alias ghcs='gh copilot suggest'; alias ghce='gh copilot explain'; zf::debug "[DEV-INTEGRATIONS] GitHub Copilot CLI aliases configured"; return 0; else zf::debug "[DEV-INTEGRATIONS] GitHub Copilot extension not installed"; return 1; fi; else zf::debug "[DEV-INTEGRATIONS] GitHub CLI not found"; return 1; fi }
if command -v gh >/dev/null 2>&1; then if command -v lazy_register >/dev/null 2>&1; then lazy_register gh-copilot _load_github_copilot; lazy_register ghcs _load_github_copilot; lazy_register ghce _load_github_copilot; zf::debug "[DEV-INTEGRATIONS] GitHub Copilot registered for lazy loading"; else _load_github_copilot gh-copilot; fi; fi
export DEV_ENV_DETECTED="$(zf::dev_detect_env)"; [[ -n $DEV_ENV_DETECTED ]] && zf::debug "[DEV-INTEGRATIONS] Detected development environments: $DEV_ENV_DETECTED"
if command -v docker >/dev/null 2>&1; then export DOCKER_BUILDKIT="${DOCKER_BUILDKIT:-1}" COMPOSE_DOCKER_CLI_BUILD="${COMPOSE_DOCKER_CLI_BUILD:-1}"; zf::debug "[DEV-INTEGRATIONS] Docker environment configured"; fi
if command -v docker-compose >/dev/null 2>&1 || command -v docker >/dev/null 2>&1; then if docker compose version >/dev/null 2>&1; then alias dc='docker compose'; alias dcu='docker compose up'; alias dcd='docker compose down'; alias dcl='docker compose logs'; zf::debug "[DEV-INTEGRATIONS] Docker Compose (modern) aliases configured"; elif command -v docker-compose >/dev/null 2>&1; then alias dc='docker-compose'; alias dcu='docker-compose up'; alias dcd='docker-compose down'; alias dcl='docker-compose logs'; zf::debug "[DEV-INTEGRATIONS] Docker Compose (legacy) aliases configured"; fi; fi
if command -v kubectl >/dev/null 2>&1; then export ZSH_KUBECTL_AVAILABLE=1; _load_kubectl_completion(){ if command -v kubectl >/dev/null 2>&1; then source <(kubectl completion zsh); zf::debug "[DEV-INTEGRATIONS] kubectl completion loaded"; fi }; if command -v lazy_register >/dev/null 2>&1; then lazy_register kubectl-completion _load_kubectl_completion; fi; zf::debug "[DEV-INTEGRATIONS] Kubernetes aliases configured"; fi
if command -v aws >/dev/null 2>&1; then _load_aws_completion(){ if command -v aws_completer >/dev/null 2>&1; then complete -C aws_completer aws; zf::debug "[DEV-INTEGRATIONS] AWS CLI completion loaded"; fi }; if command -v lazy_register >/dev/null 2>&1; then lazy_register aws-completion _load_aws_completion; fi; fi
if [[ -d $HOME/google-cloud-sdk && :$PATH: != *:$HOME/google-cloud-sdk/bin:* ]]; then PATH="$PATH:$HOME/google-cloud-sdk/bin"; export PATH; zf::debug "[DEV-INTEGRATIONS] Added Google Cloud SDK to PATH"; fi
if command -v pyenv >/dev/null 2>&1; then _load_pyenv(){ eval "$(pyenv init -)"; if command -v pyenv-virtualenv-init >/dev/null 2>&1; then eval "$(pyenv virtualenv-init -)"; fi; zf::debug "[DEV-INTEGRATIONS] pyenv loaded"; }; if command -v lazy_register >/dev/null 2>&1; then lazy_register pyenv _load_pyenv; fi; fi
if command -v rbenv >/dev/null 2>&1; then _load_rbenv(){ eval "$(rbenv init -)"; zf::debug "[DEV-INTEGRATIONS] rbenv loaded"; }; if command -v lazy_register >/dev/null 2>&1; then lazy_register rbenv _load_rbenv; fi; fi
if [[ -z ${EDITOR:-} ]]; then for editor in nvim vim code subl nano; do if command -v $editor >/dev/null 2>&1; then export EDITOR="$editor" VISUAL="$editor"; zf::debug "[DEV-INTEGRATIONS] Set EDITOR to: $editor"; break; fi; done; fi
if command -v code >/dev/null 2>&1; then alias c='code .'; alias code-insiders='code-insiders'; zf::debug "[DEV-INTEGRATIONS] VS Code aliases configured"; fi
export DEV_INTEGRATIONS_VERSION="2.0.0" DEV_INTEGRATIONS_LOADED_AT="$(date '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo unknown)" _DEV_INTEGRATIONS_NAMESPACE_MIGRATED=1
zf::debug "[DEV-INTEGRATIONS] Development integrations ready"
return 0
