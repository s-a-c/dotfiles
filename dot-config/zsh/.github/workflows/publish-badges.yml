# Compliant with /Users/s-a-c/dotfiles/dot-config/ai/guidelines.md v50b6b88e7dea25311b5e28879c90b857ba9f1c4b0bc974a72f6b14bc68d54f49
name: zsh-publish-badges-and-metrics
run-name: zsh badges & metrics â€¢ ${{ github.ref_name }}

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./dot-config/zsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Structure Audit
        run: |
          chmod +x tools/generate-structure-audit.zsh || true
          tools/generate-structure-audit.zsh

      - name: Generate Performance Badge
        run: |
          chmod +x tools/generate-perf-badge.zsh || true
          tools/generate-perf-badge.zsh 5

      - name: Generate Perf Drift Badge (observe mode)
        run: |
          set -e
          chmod +x tools/perf-diff.sh tools/perf-drift-badge.sh || true
          # Determine segments (current & baseline) with redesignv2 preference
          BASE_SEG="docs/redesignv2/artifacts/metrics/perf-baseline-segments.txt"
          CURR_SEG="docs/redesignv2/artifacts/metrics/perf-current-segments.txt"
          if [ ! -f "$BASE_SEG" ] && [ -f docs/redesign/metrics/perf-baseline-segments.txt ]; then
            BASE_SEG="docs/redesign/metrics/perf-baseline-segments.txt"
          fi
            if [ ! -f "$CURR_SEG" ] && [ -f docs/redesign/metrics/perf-current-segments.txt ]; then
            CURR_SEG="docs/redesign/metrics/perf-current-segments.txt"
          fi
          # Only attempt drift diff if both present
          if [ -f "$BASE_SEG" ] && [ -f "$CURR_SEG" ]; then
            mkdir -p docs/redesignv2/artifacts/metrics || true
            DIFF_JSON="docs/redesignv2/artifacts/metrics/perf-diff.json"
            tools/perf-diff.sh --baseline "$BASE_SEG" --current "$CURR_SEG" --json --warn-only > "$DIFF_JSON" || true
            # Extract JSON block if perf-diff also printed text
            if grep -q '"counts"' "$DIFF_JSON"; then
              :
            else
              # perf-diff may have printed text then JSON; attempt to isolate last JSON object
              tail -500 "$DIFF_JSON" | awk 'BEGIN{json=""} /^{/{capture=1} {if(capture){json=json $0 ORS}} /}$/ {if(capture){print json; exit}}' > "${DIFF_JSON}.tmp" 2>/dev/null || true
              if [ -s "${DIFF_JSON}.tmp" ]; then mv "${DIFF_JSON}.tmp" "$DIFF_JSON"; fi
            fi
            # Generate badge (prefer redesignv2 badge dir)
            BADGE_DIR="docs/redesignv2/artifacts/badges"
            [ -d "$BADGE_DIR" ] || BADGE_DIR="docs/redesign/badges"
            mkdir -p "$BADGE_DIR"
            tools/perf-drift-badge.sh --diff-json "$DIFF_JSON" > "${BADGE_DIR}/perf-drift.json" || true
          else
            echo "Perf drift badge skipped (segments baseline or current missing)" >&2
          fi

      - name: Capture Micro Benchmark Baseline (one-time observational)
        run: |
          set -e
          METRICS_DIR="docs/redesignv2/artifacts/metrics"
          [ -d "$METRICS_DIR" ] || METRICS_DIR="docs/redesign/metrics"
          mkdir -p "$METRICS_DIR"
          BENCH_JSON="$METRICS_DIR/bench-core-baseline.json"
          if [ ! -f "$BENCH_JSON" ]; then
            echo "Capturing micro benchmark baseline..."
            chmod +x tests/performance/core-functions/bench-core-functions.zsh || true
            # Use moderate iteration/repeat; adjust later as needed
            tests/performance/core-functions/bench-core-functions.zsh --json --iterations 5000 --repeat 3 --output-json "$BENCH_JSON" || true
          else
            echo "Micro benchmark baseline already exists; skipping capture."
          fi

      - name: Generate Summary Badge
        run: |
          chmod +x tools/generate-summary-badges.zsh || true
          tools/generate-summary-badges.zsh

      - name: Determine artifact root
        id: artifact_root
        run: |
          if [ -d docs/redesignv2/artifacts/badges ] && [ -d docs/redesignv2/artifacts/metrics ]; then
            echo "root=docs/redesignv2/artifacts" >> "$GITHUB_OUTPUT"
          else
            echo "root=docs/redesign" >> "$GITHUB_OUTPUT"
          fi
          echo "Selected artifact root: $(grep root= $GITHUB_OUTPUT | cut -d= -f2)"

      - name: Soft bridge (copy new artifacts to legacy paths if using redesignv2)
        if: steps.artifact_root.outputs.root == 'docs/redesignv2/artifacts'
        run: |
          mkdir -p docs/redesign/badges docs/redesign/metrics
          rsync -a --delete docs/redesignv2/artifacts/badges/ docs/redesign/badges/
          rsync -a --delete docs/redesignv2/artifacts/metrics/ docs/redesign/metrics/ || true
          if [ -d docs/redesignv2/artifacts/checksums ]; then
            mkdir -p docs/redesign/checksums
            rsync -a --delete docs/redesignv2/artifacts/checksums/ docs/redesign/checksums/
          fi
          if [ -d docs/redesignv2/artifacts/inventories ]; then
            mkdir -p docs/redesign/inventories
            rsync -a --delete docs/redesignv2/artifacts/inventories/ docs/redesign/inventories/
          fi

      - name: Prepare publish directory
        run: |
          mkdir -p public
          # Prefer new root when publishing
          if [ -d docs/redesignv2/artifacts/badges ]; then
            cp -R docs/redesignv2/artifacts/badges public/
          else
            cp -R docs/redesign/badges public/
          fi
          if [ -d docs/redesignv2/artifacts/metrics ]; then
            cp -R docs/redesignv2/artifacts/metrics public/
          else
            cp -R docs/redesign/metrics public/
          fi
          # Simple index
          cat > public/index.html <<'HTML'
          <html><head><title>ZSH Metrics</title></head><body>
          <h1>ZSH Metrics & Badges</h1>
          <ul>
            <li><a href="badges/perf.json">perf.json</a></li>
            <li><a href="badges/structure.json">structure.json</a></li>
            <li><a href="badges/summary.json">summary.json</a></li>
            <li><a href="badges/perf-drift.json">perf-drift.json</a></li>
            <li><a href="metrics/structure-audit.md">structure-audit.md</a></li>
            <li><a href="metrics/perf-current.json">perf-current.json</a></li>
            <li><a href="metrics/perf-baseline.json">perf-baseline.json</a></li>
            <li><a href="metrics/bench-core-baseline.json">bench-core-baseline.json</a></li>
            <li><a href="metrics/perf-diff.json">perf-diff.json</a></li>
          </ul>
          <p>Raw badge endpoints can be consumed via shields.io endpoint parameter.</p>
          <p>Source now prefers redesignv2 artifacts (legacy paths bridged temporarily).</p>
          </body></html>
          HTML

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dot-config/zsh/public
          publish_branch: gh-pages
          keep_files: true

      - name: Output Shield URLs
        run: |
          echo "Perf Badge: https://img.shields.io/endpoint?url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/raw/gh-pages/badges/perf.json"
          echo "Structure Badge: https://img.shields.io/endpoint?url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/raw/gh-pages/badges/structure.json"
          echo "Summary Badge: https://img.shields.io/endpoint?url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/raw/gh-pages/badges/summary.json"
          echo "Perf Drift Badge: https://img.shields.io/endpoint?url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/raw/gh-pages/badges/perf-drift.json"
