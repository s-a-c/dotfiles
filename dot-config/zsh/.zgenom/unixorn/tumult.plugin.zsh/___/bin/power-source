#!/usr/bin/env bash
#
# Copyright 2022, Joe Block <jpb@unixorn.net>
#
# Show whether we're on battery or wall power

set -o pipefail
if [[ -n "$DEBUG" ]]; then
  set -x
fi

function echo-stderr() {
  echo "$@" 1>&2  ## Send message to stderr.
}

function fail() {
  printf '%s\n' "$1" >&2  ## Send message to stderr. Exclude >&2 if you don't want it that way.
  exit "${2-1}"  ## Return a code specified by $2 or 1 by default.
}

function check-dependencies() {
  debug "Checking dependencies..."
  # shellcheck disable=SC2041
  # Placeholders for whatever programs you really need
  for dep in "$@"
  do
    if ! has "$dep"; then
      fail "Can't find $dep in your $PATH"
    else
      debug "- Found $dep"
    fi
  done
}

function only-run-on() {
  # shellcheck disable=SC2086
  if [[ "$(uname -s | tr '[:upper:]' '[:lower:]')" != "$(echo $1 | tr '[:upper:]' '[:lower:]')" ]]; then
    fail "This script only runs on $1, this machine is running $(uname -s)"
  else
    debug "OS ($(uname -s)) is valid..."
  fi
}

function debug() {
  if [[ -n "$DEBUG" ]]; then
    echo "$@"
  fi
}

function has() {
  # Check if a command is in $PATH
  which "$@" > /dev/null 2>&1
}

function charge-percentage() {
  pmset -g batt | awk '/%/ {print $3}' | sed 's/;//g'
}

function power-state() {
  # shellcheck disable=SC2143
  if [[ "$(ioreg -c AppleSmartBattery | grep '"ExternalConnected" = Yes')" ]]; then
    echo "Charger"
  else
    echo "Battery"
  fi
}

function json_output() {
  cat<<END_JSON
{
  "power": "$(power-state)",
  "charge": "$(charge-percentage)"
}
END_JSON
}

function emoji_output() {
  if [[ $(pmset -g ac) == *"No adapter attached."* ]]
  then
    echo "$BATTERY_ICON"
  else
    echo "$CHARGER_ICON"
  fi
}

only-run-on darwin
check-dependencies ioreg

# Make the emoji easy to override
BATTERY_ICON=${BATTERY_ICON:-"ðŸ”‹"}
CHARGER_ICON=${CHARGER_ICON:-"ðŸ”Œ"}

case "$1" in
  '--json')
    json_output
    ;;
  '--emoji')
    emoji_output
    ;;
  *)
    echo "power: $(power-state)"
    echo "charge: $(charge-percentage)"
    ;;
esac
