# Adaptive Configuration System for .NG Architecture
# This file provides self-adapting system that adjusts to changing conditions automatically
# File: 30-adaptive-configuration.zsh
# Target: Self-adapting system integrated into .ng finalization

[[ "$ZSH_DEBUG" == "1" ]] && {
    printf "# ++++++ %s ++++++++++++++++++++++++++++++++++++\n" "$0" >&2
}

# =============================================================================
# ADAPTIVE CONFIGURATION SYSTEM (.NG-NATIVE)
# =============================================================================
# Provides automatic adaptation to system changes, dynamic configuration
# optimization, and context-aware adjustments integrated into .ng architecture

# Global adaptive configuration registry
typeset -gA _NG_ADAPTIVE_CONFIGS
typeset -gA _NG_SYSTEM_CONTEXTS
typeset -gA _NG_ADAPTATION_HISTORY
typeset -ga _NG_ACTIVE_ADAPTATIONS

# System context detection and classification
detect_system_context() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Detecting current system context..." >&2

    local context_changes=0

    # Detect hardware context
    local cpu_arch="unknown"
    if command -v uname >/dev/null 2>&1; then
        cpu_arch=$(uname -m 2>/dev/null || echo "unknown")
    fi

    if [[ "$cpu_arch" != "${_NG_SYSTEM_CONTEXTS[cpu_arch]:-unknown}" ]]; then
        _NG_SYSTEM_CONTEXTS["cpu_arch"]="$cpu_arch"
        echo "# [ADAPT] CPU architecture context: $cpu_arch" >&2
        ((context_changes++))
    fi

    # Detect operating system context
    local os_type="unknown"
    if command -v uname >/dev/null 2>&1; then
        os_type=$(uname -s 2>/dev/null || echo "unknown")
    fi

    if [[ "$os_type" != "${_NG_SYSTEM_CONTEXTS[os_type]:-unknown}" ]]; then
        _NG_SYSTEM_CONTEXTS["os_type"]="$os_type"
        echo "# [ADAPT] Operating system context: $os_type" >&2
        ((context_changes++))
    fi

    # Detect terminal context
    local terminal_type="${TERM:-unknown}"
    if [[ "$terminal_type" != "${_NG_SYSTEM_CONTEXTS[terminal_type]:-unknown}" ]]; then
        _NG_SYSTEM_CONTEXTS["terminal_type"]="$terminal_type"
        [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Terminal context: $terminal_type" >&2
        ((context_changes++))
    fi

    # Detect development environment context
    local dev_context="basic"
    if [[ -d "/Applications/Xcode.app" ]] || [[ -d "/Library/Developer/CommandLineTools" ]]; then
        dev_context="development"
        if command -v git >/dev/null 2>&1 && command -v node >/dev/null 2>&1; then
            dev_context="full_development"
        fi
    fi

    if [[ "$dev_context" != "${_NG_SYSTEM_CONTEXTS[dev_context]:-unknown}" ]]; then
        _NG_SYSTEM_CONTEXTS["dev_context"]="$dev_context"
        echo "# [ADAPT] Development context: $dev_context" >&2
        ((context_changes++))
    fi

    # Detect network context (simplified)
    local network_context="disconnected"
    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        network_context="connected"
    fi

    if [[ "$network_context" != "${_NG_SYSTEM_CONTEXTS[network_context]:-unknown}" ]]; then
        _NG_SYSTEM_CONTEXTS["network_context"]="$network_context"
        [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Network context: $network_context" >&2
        ((context_changes++))
    fi

    # Detect performance context
    local performance_context="normal"
    local startup_time="${_NG_PERF_METRICS[startup_time_ms]:-0}"
    if [[ "$startup_time" -gt 8000 ]]; then
        performance_context="slow"
    elif [[ "$startup_time" -gt 5000 ]]; then
        performance_context="degraded"
    elif [[ "$startup_time" -gt 0 ]] && [[ "$startup_time" -lt 2000 ]]; then
        performance_context="fast"
    fi

    if [[ "$performance_context" != "${_NG_SYSTEM_CONTEXTS[performance_context]:-unknown}" ]]; then
        _NG_SYSTEM_CONTEXTS["performance_context"]="$performance_context"
        echo "# [ADAPT] Performance context: $performance_context" >&2
        ((context_changes++))
    fi

    # Export context detection results
    export _NG_ADAPT_CONTEXT_CHANGES="$context_changes"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ADAPT] System context detection complete: $context_changes changes detected" >&2
    }

    return 0
}

# Automatic adaptation to system changes
adapt_to_system_changes() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Adapting .ng configuration to system changes..." >&2

    local adaptations_applied=0

    # Adapt to CPU architecture
    local cpu_arch="${_NG_SYSTEM_CONTEXTS[cpu_arch]:-unknown}"
    case "$cpu_arch" in
        "arm64")
            # Apple Silicon optimizations
            if [[ ":$PATH:" != *":/opt/homebrew/bin:"* ]]; then
                export PATH="/opt/homebrew/bin:$PATH"
                echo "# [ADAPT] Applied Apple Silicon PATH optimization" >&2
                _NG_ACTIVE_ADAPTATIONS+=("apple_silicon_path")
                ((adaptations_applied++))
            fi

            # Apple Silicon-specific tool configurations
            _NG_ADAPTIVE_CONFIGS["homebrew_prefix"]="/opt/homebrew"
            _NG_ADAPTIVE_CONFIGS["architecture_optimized"]="apple_silicon"
            ;;
        "x86_64")
            # Intel optimizations
            if [[ ":$PATH:" != *":/usr/local/bin:"* ]]; then
                export PATH="/usr/local/bin:$PATH"
                [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Applied Intel PATH configuration" >&2
                _NG_ACTIVE_ADAPTATIONS+=("intel_path")
                ((adaptations_applied++))
            fi

            _NG_ADAPTIVE_CONFIGS["homebrew_prefix"]="/usr/local"
            _NG_ADAPTIVE_CONFIGS["architecture_optimized"]="intel"
            ;;
    esac

    # Adapt to development context
    local dev_context="${_NG_SYSTEM_CONTEXTS[dev_context]:-unknown}"
    case "$dev_context" in
        "full_development")
            # Enable full development optimizations
            _NG_ADAPTIVE_CONFIGS["completion_aggressive"]="true"
            _NG_ADAPTIVE_CONFIGS["plugin_loading_mode"]="full"
            _NG_ADAPTIVE_CONFIGS["developer_tools_enabled"]="true"

            # Adaptive git configuration
            if command -v git >/dev/null 2>&1 && [[ ! -f ~/.gitconfig ]]; then
                echo "# [ADAPT] Development environment detected but git not configured" >&2
                _NG_ACTIVE_ADAPTATIONS+=("git_config_needed")
                ((adaptations_applied++))
            fi
            ;;
        "development")
            # Basic development optimizations
            _NG_ADAPTIVE_CONFIGS["completion_moderate"]="true"
            _NG_ADAPTIVE_CONFIGS["plugin_loading_mode"]="essential"
            _NG_ADAPTIVE_CONFIGS["developer_tools_enabled"]="true"
            ;;
        "basic")
            # Minimal configuration for basic use
            _NG_ADAPTIVE_CONFIGS["completion_minimal"]="true"
            _NG_ADAPTIVE_CONFIGS["plugin_loading_mode"]="minimal"
            _NG_ADAPTIVE_CONFIGS["developer_tools_enabled"]="false"
            ;;
    esac

    # Adapt to performance context
    local performance_context="${_NG_SYSTEM_CONTEXTS[performance_context]:-unknown}"
    case "$performance_context" in
        "slow")
            # Aggressive performance optimizations
            _NG_ADAPTIVE_CONFIGS["lazy_loading_aggressive"]="true"
            _NG_ADAPTIVE_CONFIGS["plugin_loading_deferred"]="true"
            _NG_ADAPTIVE_CONFIGS["completion_cache_aggressive"]="true"
            echo "# [ADAPT] Applied aggressive performance optimizations for slow system" >&2
            _NG_ACTIVE_ADAPTATIONS+=("aggressive_performance")
            ((adaptations_applied++))
            ;;
        "degraded")
            # Moderate performance optimizations
            _NG_ADAPTIVE_CONFIGS["lazy_loading_moderate"]="true"
            _NG_ADAPTIVE_CONFIGS["plugin_loading_selective"]="true"
            echo "# [ADAPT] Applied moderate performance optimizations" >&2
            _NG_ACTIVE_ADAPTATIONS+=("moderate_performance")
            ((adaptations_applied++))
            ;;
        "fast")
            # Enable advanced features for fast systems
            _NG_ADAPTIVE_CONFIGS["advanced_features_enabled"]="true"
            _NG_ADAPTIVE_CONFIGS["plugin_loading_full"]="true"
            _NG_ADAPTIVE_CONFIGS["completion_full_featured"]="true"
            [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Enabled advanced features for fast system" >&2
            _NG_ACTIVE_ADAPTATIONS+=("advanced_features")
            ((adaptations_applied++))
            ;;
    esac

    # Adapt to terminal context
    local terminal_type="${_NG_SYSTEM_CONTEXTS[terminal_type]:-unknown}"
    case "$terminal_type" in
        "xterm-256color"|"screen-256color")
            _NG_ADAPTIVE_CONFIGS["color_support"]="256"
            _NG_ADAPTIVE_CONFIGS["advanced_prompt"]="true"
            ;;
        "xterm-color")
            _NG_ADAPTIVE_CONFIGS["color_support"]="16"
            _NG_ADAPTIVE_CONFIGS["basic_prompt"]="true"
            ;;
        *)
            _NG_ADAPTIVE_CONFIGS["color_support"]="basic"
            _NG_ADAPTIVE_CONFIGS["minimal_prompt"]="true"
            ;;
    esac

    # Export adaptation results
    export _NG_ADAPT_ADAPTATIONS_APPLIED="$adaptations_applied"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ADAPT] System adaptation complete: $adaptations_applied adaptations applied" >&2
    }

    return 0
}

# Dynamic .ng configuration optimization
optimize_ng_configuration_dynamically() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Optimizing .ng configuration dynamically..." >&2

    local optimizations_applied=0

    # Dynamic PATH optimization based on usage patterns
    if [[ "${_NG_ADAPTIVE_CONFIGS[architecture_optimized]}" == "apple_silicon" ]]; then
        # Ensure Apple Silicon tools are prioritized
        local homebrew_prefix="${_NG_ADAPTIVE_CONFIGS[homebrew_prefix]:-/opt/homebrew}"
        if [[ -d "$homebrew_prefix/bin" ]] && [[ ":$PATH:" != *":$homebrew_prefix/bin:"* ]]; then
            export PATH="$homebrew_prefix/bin:$PATH"
            echo "# [ADAPT] Dynamically optimized PATH for Apple Silicon" >&2
            ((optimizations_applied++))
        fi
    fi

    # Dynamic completion optimization
    if [[ "${_NG_ADAPTIVE_CONFIGS[completion_aggressive]}" == "true" ]]; then
        # Enable aggressive completion features
        zstyle ':completion:*' use-cache yes
        zstyle ':completion:*' cache-path "${XDG_CACHE_HOME:-$HOME/.cache}/zsh/completions"
        zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
        [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Applied aggressive completion optimization" >&2
        ((optimizations_applied++))
    elif [[ "${_NG_ADAPTIVE_CONFIGS[completion_minimal]}" == "true" ]]; then
        # Use minimal completion for performance
        zstyle ':completion:*' use-cache yes
        zstyle ':completion:*' cache-path "${XDG_CACHE_HOME:-$HOME/.cache}/zsh/completions"
        [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Applied minimal completion optimization" >&2
        ((optimizations_applied++))
    fi

    # Dynamic plugin loading optimization
    if [[ "${_NG_ADAPTIVE_CONFIGS[lazy_loading_aggressive]}" == "true" ]]; then
        # Implement aggressive lazy loading
        _NG_ADAPTIVE_CONFIGS["defer_non_essential"]="true"
        _NG_ADAPTIVE_CONFIGS["batch_plugin_loading"]="true"
        echo "# [ADAPT] Enabled aggressive lazy loading for performance" >&2
        ((optimizations_applied++))
    fi

    # Dynamic environment optimization
    if [[ "${_NG_ADAPTIVE_CONFIGS[developer_tools_enabled]}" == "true" ]]; then
        # Ensure development environment variables are optimized
        [[ -z "$DEVELOPER_DIR" ]] && [[ -d "/Applications/Xcode.app/Contents/Developer" ]] && {
            export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
            echo "# [ADAPT] Set DEVELOPER_DIR for development environment" >&2
            ((optimizations_applied++))
        }
    fi

    # Export optimization results
    export _NG_ADAPT_OPTIMIZATIONS_APPLIED="$optimizations_applied"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ADAPT] Dynamic optimization complete: $optimizations_applied optimizations applied" >&2
    }

    return 0
}

# Context-aware .ng configuration switching
switch_ng_configuration_context() {
    local target_context="$1"
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Switching .ng configuration to context: $target_context" >&2

    local switches_applied=0

    case "$target_context" in
        "minimal")
            # Switch to minimal configuration
            _NG_ADAPTIVE_CONFIGS["plugin_loading_mode"]="minimal"
            _NG_ADAPTIVE_CONFIGS["completion_mode"]="basic"
            _NG_ADAPTIVE_CONFIGS["ui_enhancements"]="disabled"
            _NG_ADAPTIVE_CONFIGS["performance_monitoring"]="basic"
            echo "# [ADAPT] Switched to minimal configuration context" >&2
            ((switches_applied++))
            ;;
        "development")
            # Switch to development configuration
            _NG_ADAPTIVE_CONFIGS["plugin_loading_mode"]="full"
            _NG_ADAPTIVE_CONFIGS["completion_mode"]="aggressive"
            _NG_ADAPTIVE_CONFIGS["ui_enhancements"]="enabled"
            _NG_ADAPTIVE_CONFIGS["performance_monitoring"]="detailed"
            _NG_ADAPTIVE_CONFIGS["developer_tools_enabled"]="true"
            echo "# [ADAPT] Switched to development configuration context" >&2
            ((switches_applied++))
            ;;
        "performance")
            # Switch to performance-optimized configuration
            _NG_ADAPTIVE_CONFIGS["plugin_loading_mode"]="essential"
            _NG_ADAPTIVE_CONFIGS["completion_mode"]="cached"
            _NG_ADAPTIVE_CONFIGS["ui_enhancements"]="minimal"
            _NG_ADAPTIVE_CONFIGS["performance_monitoring"]="active"
            _NG_ADAPTIVE_CONFIGS["lazy_loading_aggressive"]="true"
            echo "# [ADAPT] Switched to performance configuration context" >&2
            ((switches_applied++))
            ;;
        "server")
            # Switch to server/headless configuration
            _NG_ADAPTIVE_CONFIGS["plugin_loading_mode"]="server"
            _NG_ADAPTIVE_CONFIGS["completion_mode"]="server"
            _NG_ADAPTIVE_CONFIGS["ui_enhancements"]="disabled"
            _NG_ADAPTIVE_CONFIGS["performance_monitoring"]="minimal"
            _NG_ADAPTIVE_CONFIGS["color_support"]="none"
            echo "# [ADAPT] Switched to server configuration context" >&2
            ((switches_applied++))
            ;;
        *)
            echo "# [ADAPT] WARNING: Unknown configuration context: $target_context" >&2
            return 1
            ;;
    esac

    # Apply context-specific adaptations
    optimize_ng_configuration_dynamically

    # Record context switch
    _NG_ADAPTATION_HISTORY["$(date +%s)"]="context_switch:$target_context"
    export _NG_ADAPT_CURRENT_CONTEXT="$target_context"
    export _NG_ADAPT_CONTEXT_SWITCHES="$switches_applied"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ADAPT] Context switching complete: $switches_applied switches applied" >&2
    }

    return 0
}

# Automatic tool detection and .ng integration
detect_and_integrate_tools() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Detecting and integrating available tools..." >&2

    local integrations_added=0

    # Define tools to detect and integrate
    local -A tool_integrations=(
        ["docker"]="container_tools"
        ["kubectl"]="kubernetes_tools"
        ["npm"]="node_development"
        ["python3"]="python_development"
        ["cargo"]="rust_development"
        ["go"]="go_development"
        ["brew"]="package_management"
        ["git"]="version_control"
    )

    # Detect and integrate tools
    for tool in "${!tool_integrations[@]}"; do
        local category="${tool_integrations[$tool]}"

        if command -v "$tool" >/dev/null 2>&1; then
            if [[ -z "${_NG_ADAPTIVE_CONFIGS[$category]}" ]]; then
                _NG_ADAPTIVE_CONFIGS["$category"]="detected:$tool"
                [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Integrated tool: $tool ($category)" >&2
                ((integrations_added++))

                # Apply tool-specific adaptations
                case "$tool" in
                    "docker")
                        _NG_ADAPTIVE_CONFIGS["completion_docker"]="enabled"
                        ;;
                    "kubectl")
                        _NG_ADAPTIVE_CONFIGS["completion_kubernetes"]="enabled"
                        ;;
                    "npm")
                        _NG_ADAPTIVE_CONFIGS["node_environment"]="detected"
                        _NG_ADAPTIVE_CONFIGS["completion_npm"]="enabled"
                        ;;
                    "cargo")
                        _NG_ADAPTIVE_CONFIGS["rust_environment"]="detected"
                        [[ -z "$CARGO_TARGET_DIR" ]] && export CARGO_TARGET_DIR="/tmp/cargo-builds"
                        ;;
                    "brew")
                        local brew_prefix
                        if brew_prefix=$(brew --prefix 2>/dev/null); then
                            _NG_ADAPTIVE_CONFIGS["homebrew_prefix"]="$brew_prefix"
                            _NG_ADAPTIVE_CONFIGS["package_manager"]="homebrew"
                        fi
                        ;;
                esac
            fi
        fi
    done

    # Detect development environments
    if [[ -f "package.json" ]] && command -v npm >/dev/null 2>&1; then
        _NG_ADAPTIVE_CONFIGS["project_type"]="node_project"
        echo "# [ADAPT] Detected Node.js project environment" >&2
        ((integrations_added++))
    elif [[ -f "Cargo.toml" ]] && command -v cargo >/dev/null 2>&1; then
        _NG_ADAPTIVE_CONFIGS["project_type"]="rust_project"
        echo "# [ADAPT] Detected Rust project environment" >&2
        ((integrations_added++))
    elif [[ -f "go.mod" ]] && command -v go >/dev/null 2>&1; then
        _NG_ADAPTIVE_CONFIGS["project_type"]="go_project"
        echo "# [ADAPT] Detected Go project environment" >&2
        ((integrations_added++))
    fi

    # Export integration results
    export _NG_ADAPT_TOOL_INTEGRATIONS="$integrations_added"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ADAPT] Tool integration complete: $integrations_added tools integrated" >&2
    }

    return 0
}

# Environment-specific .ng optimizations
apply_environment_optimizations() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Applying environment-specific .ng optimizations..." >&2

    local optimizations_applied=0

    # Apply macOS-specific optimizations
    local os_type="${_NG_SYSTEM_CONTEXTS[os_type]:-unknown}"
    if [[ "$os_type" == "Darwin" ]]; then
        # macOS-specific optimizations
        _NG_ADAPTIVE_CONFIGS["platform_optimizations"]="macos"

        # Optimize for macOS PATH structure
        if [[ ":$PATH:" != *":/usr/local/bin:"* ]]; then
            export PATH="/usr/local/bin:$PATH"
            [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Applied macOS PATH optimization" >&2
            ((optimizations_applied++))
        fi

        # macOS-specific environment variables
        [[ -z "$BROWSER" ]] && export BROWSER="open"
        _NG_ADAPTIVE_CONFIGS["default_browser"]="open"
        ((optimizations_applied++))
    fi

    # Apply performance-based optimizations
    local performance_context="${_NG_SYSTEM_CONTEXTS[performance_context]:-unknown}"
    case "$performance_context" in
        "slow")
            # Disable expensive features for slow systems
            _NG_ADAPTIVE_CONFIGS["syntax_highlighting"]="disabled"
            _NG_ADAPTIVE_CONFIGS["git_status_checking"]="minimal"
            _NG_ADAPTIVE_CONFIGS["completion_caching"]="aggressive"
            echo "# [ADAPT] Applied slow system optimizations" >&2
            ((optimizations_applied++))
            ;;
        "fast")
            # Enable advanced features for fast systems
            _NG_ADAPTIVE_CONFIGS["syntax_highlighting"]="enhanced"
            _NG_ADAPTIVE_CONFIGS["git_status_checking"]="detailed"
            _NG_ADAPTIVE_CONFIGS["completion_caching"]="smart"
            [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Applied fast system enhancements" >&2
            ((optimizations_applied++))
            ;;
    esac

    # Apply network-based optimizations
    local network_context="${_NG_SYSTEM_CONTEXTS[network_context]:-unknown}"
    if [[ "$network_context" == "disconnected" ]]; then
        _NG_ADAPTIVE_CONFIGS["online_features"]="disabled"
        _NG_ADAPTIVE_CONFIGS["update_checking"]="disabled"
        [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Applied offline optimizations" >&2
        ((optimizations_applied++))
    else
        _NG_ADAPTIVE_CONFIGS["online_features"]="enabled"
        _NG_ADAPTIVE_CONFIGS["update_checking"]="enabled"
    fi

    # Export optimization results
    export _NG_ADAPT_ENV_OPTIMIZATIONS="$optimizations_applied"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ADAPT] Environment optimization complete: $optimizations_applied optimizations applied" >&2
    }

    return 0
}

# Adaptive system diagnostics and reporting
ng_adaptive_doctor() {
    echo "🔄 .NG Adaptive Configuration System - Status Report"
    echo "=================================================="
    echo

    echo "🌍 System Context:"
    echo "  CPU Architecture: ${_NG_SYSTEM_CONTEXTS[cpu_arch]:-unknown}"
    echo "  Operating System: ${_NG_SYSTEM_CONTEXTS[os_type]:-unknown}"
    echo "  Terminal Type: ${_NG_SYSTEM_CONTEXTS[terminal_type]:-unknown}"
    echo "  Development Context: ${_NG_SYSTEM_CONTEXTS[dev_context]:-unknown}"
    echo "  Performance Context: ${_NG_SYSTEM_CONTEXTS[performance_context]:-unknown}"
    echo "  Network Context: ${_NG_SYSTEM_CONTEXTS[network_context]:-unknown}"
    echo

    echo "⚙️ Adaptive Status:"
    echo "  Context Changes: ${_NG_ADAPT_CONTEXT_CHANGES:-0}"
    echo "  Adaptations Applied: ${_NG_ADAPT_ADAPTATIONS_APPLIED:-0}"
    echo "  Optimizations Applied: ${_NG_ADAPT_OPTIMIZATIONS_APPLIED:-0}"
    echo "  Tool Integrations: ${_NG_ADAPT_TOOL_INTEGRATIONS:-0}"
    echo "  Environment Optimizations: ${_NG_ADAPT_ENV_OPTIMIZATIONS:-0}"
    echo "  Current Context: ${_NG_ADAPT_CURRENT_CONTEXT:-auto}"
    echo

    if [[ "${#_NG_ACTIVE_ADAPTATIONS[@]}" -gt 0 ]]; then
        echo "🔧 Active Adaptations:"
        for adaptation in "${_NG_ACTIVE_ADAPTATIONS[@]}"; do
            echo "  ✓ $adaptation"
        done
        echo
    fi

    if [[ "${#_NG_ADAPTIVE_CONFIGS[@]}" -gt 0 ]]; then
        echo "📋 Adaptive Configurations:"
        for config in "${!_NG_ADAPTIVE_CONFIGS[@]}"; do
            echo "  • $config: ${_NG_ADAPTIVE_CONFIGS[$config]}"
        done
        echo
    fi

    echo "💡 Context Switching Available:"
    echo "  • ng_context_switch minimal    - Minimal resource usage"
    echo "  • ng_context_switch development - Full development features"
    echo "  • ng_context_switch performance - Performance optimized"
    echo "  • ng_context_switch server     - Server/headless mode"
    echo

    return 0
}

# Manual context switching utility
ng_context_switch() {
    local target_context="$1"

    if [[ -z "$target_context" ]]; then
        echo "Usage: ng_context_switch <context>"
        echo "Available contexts: minimal, development, performance, server"
        return 1
    fi

    echo "🔄 .NG Context Switch: $target_context"
    echo "====================================="
    echo

    switch_ng_configuration_context "$target_context"

    echo "Context switch complete."
    echo "New context: $target_context"
    echo "Adaptations applied: ${_NG_ADAPT_CONTEXT_SWITCHES:-0}"

    return 0
}

# =============================================================================
# INITIALIZE ADAPTIVE CONFIGURATION SYSTEM
# =============================================================================

[[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Initializing adaptive configuration system..." >&2

# 1. Detect current system context
detect_system_context

# 2. Adapt to detected system changes
adapt_to_system_changes

# 3. Optimize configuration dynamically
optimize_ng_configuration_dynamically

# 4. Detect and integrate available tools
detect_and_integrate_tools

# 5. Apply environment-specific optimizations
apply_environment_optimizations

# Export functions for use by other .ng systems
typeset -gf detect_system_context adapt_to_system_changes
typeset -gf optimize_ng_configuration_dynamically switch_ng_configuration_context
typeset -gf detect_and_integrate_tools apply_environment_optimizations
typeset -gf ng_adaptive_doctor ng_context_switch

[[ "$ZSH_DEBUG" == "1" ]] && echo "# [ADAPT] Adaptive configuration system initialized successfully" >&2

# =============================================================================
# .NG INTEGRATION STATUS
# =============================================================================
export _NG_ADAPTIVE_CONFIGURATION_LOADED="true"
export _NG_ADAPTIVE_SYSTEM_VERSION="1.0.0"
