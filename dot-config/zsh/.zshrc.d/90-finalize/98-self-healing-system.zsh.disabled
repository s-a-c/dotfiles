# Self-Healing System for .NG Architecture
# This file provides comprehensive self-healing that automatically resolves detected issues
# File: 35-self-healing-system.zsh
# Target: Comprehensive self-healing integrated into .ng finalization

[[ "$ZSH_DEBUG" == "1" ]] && {
    printf "# ++++++ %s ++++++++++++++++++++++++++++++++++++\n" "$0" >&2
}

# =============================================================================
# SELF-HEALING SYSTEM (.NG-NATIVE)
# =============================================================================
# Provides comprehensive self-healing capabilities that automatically detect
# and resolve issues across all .ng systems and components

# Global self-healing registry
typeset -gA _NG_HEALING_STRATEGIES
typeset -gA _NG_HEALING_HISTORY
typeset -gA _NG_HEALING_SUCCESS_RATES
typeset -ga _NG_HEALING_ACTIONS_TAKEN
typeset -ga _NG_ISSUES_DETECTED

# Automatic .ng issue detection and resolution
detect_and_heal_ng_issues() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [HEAL] Detecting and healing .ng system issues..." >&2

    local issues_detected=0
    local issues_healed=0
    local healing_attempts=0

    # Check PATH system health and heal if needed
    local path_health="${_NG_PATH_HEALTH_STATUS:-unknown}"
    if [[ "$path_health" == "degraded" ]] || [[ "$path_health" == "critical" ]]; then
        echo "# [HEAL] DETECTED: PATH system health issue ($path_health)" >&2
        _NG_ISSUES_DETECTED+=("path_system_degraded")
        ((issues_detected++))

        # Attempt PATH healing
        echo "# [HEAL] HEALING: Attempting PATH system repair..." >&2
        ((healing_attempts++))

        if typeset -f path_self_healing_system >/dev/null 2>&1; then
            if path_self_healing_system; then
                echo "# [HEAL] SUCCESS: PATH system healed" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("path_system_healed")
                ((issues_healed++))
            else
                echo "# [HEAL] FAILED: PATH system healing unsuccessful" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("path_system_heal_failed")
            fi
        fi
    fi

    # Check command availability and heal if needed
    local command_health="${_NG_COMMAND_HEALTH_STATUS:-unknown}"
    local critical_missing="${_NG_COMMAND_CRITICAL_MISSING:-0}"
    if [[ "$command_health" == "critical" ]] || [[ "$critical_missing" -gt 0 ]]; then
        echo "# [HEAL] DETECTED: Command availability issue ($critical_missing critical missing)" >&2
        _NG_ISSUES_DETECTED+=("command_availability_critical")
        ((issues_detected++))

        # Attempt command healing
        echo "# [HEAL] HEALING: Attempting command availability repair..." >&2
        ((healing_attempts++))

        if typeset -f setup_intelligent_fallbacks >/dev/null 2>&1; then
            if setup_intelligent_fallbacks; then
                echo "# [HEAL] SUCCESS: Command fallbacks established" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("command_fallbacks_healed")
                ((issues_healed++))
            else
                echo "# [HEAL] FAILED: Command fallback setup unsuccessful" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("command_fallbacks_heal_failed")
            fi
        fi
    fi

    # Check environment health and heal if needed
    local env_health="${_NG_ENV_HEALTH_STATUS:-unknown}"
    local env_issues="${_NG_ENV_TOTAL_ISSUES:-0}"
    if [[ "$env_health" == "critical" ]] || [[ "$env_issues" -gt 5 ]]; then
        echo "# [HEAL] DETECTED: Environment health issue ($env_issues total issues)" >&2
        _NG_ISSUES_DETECTED+=("environment_health_degraded")
        ((issues_detected++))

        # Attempt environment healing
        echo "# [HEAL] HEALING: Attempting environment repair..." >&2
        ((healing_attempts++))

        if typeset -f repair_environment_issues >/dev/null 2>&1; then
            if repair_environment_issues; then
                echo "# [HEAL] SUCCESS: Environment issues healed" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("environment_healed")
                ((issues_healed++))
            else
                echo "# [HEAL] FAILED: Environment healing unsuccessful" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("environment_heal_failed")
            fi
        fi
    fi

    # Check plugin system health and heal if needed
    local plugin_health="${_NG_PLUGIN_HEALTH_ISSUES:-0}"
    local plugin_conflicts="${_NG_PLUGIN_COMPATIBILITY_ISSUES:-0}"
    if [[ "$plugin_health" -gt 0 ]] || [[ "$plugin_conflicts" -gt 0 ]]; then
        echo "# [HEAL] DETECTED: Plugin system issues ($plugin_health health, $plugin_conflicts conflicts)" >&2
        _NG_ISSUES_DETECTED+=("plugin_system_issues")
        ((issues_detected++))

        # Attempt plugin healing
        echo "# [HEAL] HEALING: Attempting plugin system repair..." >&2
        ((healing_attempts++))

        if typeset -f resolve_plugin_conflicts >/dev/null 2>&1; then
            if resolve_plugin_conflicts; then
                echo "# [HEAL] SUCCESS: Plugin conflicts resolved" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("plugin_conflicts_healed")
                ((issues_healed++))
            else
                echo "# [HEAL] FAILED: Plugin conflict resolution unsuccessful" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("plugin_conflicts_heal_failed")
            fi
        fi
    fi

    # Check completion system health and heal if needed
    local completion_health="${_NG_COMPLETION_HEALTH_STATUS:-unknown}"
    local completion_issues="${_NG_COMPLETION_CACHE_ISSUES:-0}"
    if [[ "$completion_health" == "poor" ]] || [[ "$completion_health" == "critical" ]] || [[ "$completion_issues" -gt 2 ]]; then
        echo "# [HEAL] DETECTED: Completion system issues ($completion_health, $completion_issues cache issues)" >&2
        _NG_ISSUES_DETECTED+=("completion_system_degraded")
        ((issues_detected++))

        # Attempt completion healing
        echo "# [HEAL] HEALING: Attempting completion system repair..." >&2
        ((healing_attempts++))

        if typeset -f intelligent_cache_rebuild >/dev/null 2>&1; then
            if intelligent_cache_rebuild "self_healing_triggered"; then
                echo "# [HEAL] SUCCESS: Completion system healed" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("completion_system_healed")
                ((issues_healed++))
            else
                echo "# [HEAL] FAILED: Completion system healing unsuccessful" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("completion_system_heal_failed")
            fi
        fi
    fi

    # Check configuration integrity and heal if needed
    local config_issues="${_NG_CONFIG_INTEGRITY_ISSUES:-0}"
    local config_drift="${_NG_CONFIG_DRIFT_DETECTED:-false}"
    if [[ "$config_issues" -gt 2 ]] || [[ "$config_drift" == "true" ]]; then
        echo "# [HEAL] DETECTED: Configuration integrity issues ($config_issues issues, drift: $config_drift)" >&2
        _NG_ISSUES_DETECTED+=("configuration_integrity_issues")
        ((issues_detected++))

        # Attempt configuration healing
        echo "# [HEAL] HEALING: Attempting configuration repair..." >&2
        ((healing_attempts++))

        if typeset -f repair_ng_configuration_issues >/dev/null 2>&1; then
            if repair_ng_configuration_issues; then
                echo "# [HEAL] SUCCESS: Configuration issues healed" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("configuration_healed")
                ((issues_healed++))
            else
                echo "# [HEAL] FAILED: Configuration healing unsuccessful" >&2
                _NG_HEALING_ACTIONS_TAKEN+=("configuration_heal_failed")
            fi
        fi
    fi

    # Export detection and healing results
    export _NG_HEAL_ISSUES_DETECTED="$issues_detected"
    export _NG_HEAL_ISSUES_HEALED="$issues_healed"
    export _NG_HEAL_ATTEMPTS="$healing_attempts"
    export _NG_HEAL_SUCCESS_RATE="$((issues_healed * 100 / (healing_attempts > 0 ? healing_attempts : 1)))"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [HEAL] Issue detection and healing complete: $issues_healed/$issues_detected healed (${_NG_HEAL_SUCCESS_RATE}% success)" >&2
    }

    return 0
}

# Self-healing .ng plugin system
heal_ng_plugin_system() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [HEAL] Self-healing .ng plugin system..." >&2

    local plugin_healing_actions=0
    local plugin_healing_successes=0

    # Heal plugin loading issues
    local ng_systems_failed="${_NG_PERF_METRICS[ng_systems_failed]:-0}"
    if [[ "$ng_systems_failed" -gt 0 ]]; then
        echo "# [HEAL] PLUGIN: Attempting to repair failed .ng systems..." >&2
        ((plugin_healing_actions++))

        # Check and restart failed .ng prevention systems
        local systems_restarted=0

        # Check intelligent PATH system
        if [[ "${_NG_INTELLIGENT_PATH_LOADED:-false}" != "true" ]]; then
            echo "# [HEAL] PLUGIN: Restarting intelligent PATH system..." >&2
            if typeset -f intelligent_path_builder >/dev/null 2>&1; then
                intelligent_path_builder && {
                    export _NG_INTELLIGENT_PATH_LOADED="true"
                    ((systems_restarted++))
                }
            fi
        fi

        # Check command assurance system
        if [[ "${_NG_COMMAND_ASSURANCE_LOADED:-false}" != "true" ]]; then
            echo "# [HEAL] PLUGIN: Restarting command assurance system..." >&2
            if typeset -f intelligent_command_discovery >/dev/null 2>&1; then
                intelligent_command_discovery && {
                    export _NG_COMMAND_ASSURANCE_LOADED="true"
                    ((systems_restarted++))
                }
            fi
        fi

        # Check environment validation system
        if [[ "${_NG_ENVIRONMENT_VALIDATION_LOADED:-false}" != "true" ]]; then
            echo "# [HEAL] PLUGIN: Restarting environment validation system..." >&2
            if typeset -f validate_environment_variables >/dev/null 2>&1; then
                validate_environment_variables && {
                    export _NG_ENVIRONMENT_VALIDATION_LOADED="true"
                    ((systems_restarted++))
                }
            fi
        fi

        if [[ "$systems_restarted" -gt 0 ]]; then
            echo "# [HEAL] PLUGIN SUCCESS: Restarted $systems_restarted .ng systems" >&2
            ((plugin_healing_successes++))
        fi
    fi

    # Heal plugin dependency issues
    local plugin_dependencies="${_NG_PLUGIN_DEPENDENCIES_SATISFIED:-unknown}"
    if [[ "$plugin_dependencies" != "true" ]]; then
        echo "# [HEAL] PLUGIN: Attempting to resolve plugin dependencies..." >&2
        ((plugin_healing_actions++))

        if typeset -f resolve_plugin_dependencies >/dev/null 2>&1; then
            if resolve_plugin_dependencies; then
                echo "# [HEAL] PLUGIN SUCCESS: Plugin dependencies resolved" >&2
                ((plugin_healing_successes++))
            fi
        fi
    fi

    # Heal plugin performance issues
    local plugin_perf_issues="${_NG_PLUGIN_PERFORMANCE_ISSUES:-0}"
    if [[ "$plugin_perf_issues" -gt 0 ]]; then
        echo "# [HEAL] PLUGIN: Attempting to resolve plugin performance issues..." >&2
        ((plugin_healing_actions++))

        if typeset -f profile_plugin_performance >/dev/null 2>&1; then
            if profile_plugin_performance; then
                echo "# [HEAL] PLUGIN SUCCESS: Plugin performance optimized" >&2
                ((plugin_healing_successes++))
            fi
        fi
    fi

    # Export plugin healing results
    export _NG_HEAL_PLUGIN_ACTIONS="$plugin_healing_actions"
    export _NG_HEAL_PLUGIN_SUCCESSES="$plugin_healing_successes"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [HEAL] Plugin system healing complete: $plugin_healing_successes/$plugin_healing_actions successful" >&2
    }

    return 0
}

# Automatic .ng configuration repair
repair_ng_configuration_automatically() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [HEAL] Automatically repairing .ng configuration..." >&2

    local config_healing_actions=0
    local config_healing_successes=0

    # Repair missing .ng directories
    local -a required_ng_dirs=(
        ".zshrc.pre-plugins.d.ng/00-core"
        ".zshrc.pre-plugins.d.ng/10-tools"
        ".zshrc.pre-plugins.d.ng/20-plugins"
        ".zshrc.d.ng/00-core"
        ".zshrc.d.ng/10-tools"
        ".zshrc.d.ng/20-plugins"
        ".zshrc.d.ng/30-ui"
        ".zshrc.d.ng/90-finalize"
    )

    for ng_dir in "${required_ng_dirs[@]}"; do
        local full_path="${ZDOTDIR:-$HOME/.config/zsh}/$ng_dir"
        if [[ ! -d "$full_path" ]]; then
            echo "# [HEAL] CONFIG: Creating missing .ng directory: $ng_dir" >&2
            ((config_healing_actions++))

            if mkdir -p "$full_path" 2>/dev/null; then
                echo "# [HEAL] CONFIG SUCCESS: Created directory: $ng_dir" >&2
                ((config_healing_successes++))
            else
                echo "# [HEAL] CONFIG FAILED: Cannot create directory: $ng_dir" >&2
            fi
        fi
    done

    # Repair .ng file permissions
    local -a critical_ng_files=(
        ".zshrc.pre-plugins.d.ng/00-core/05-intelligent-path-system.zsh"
        ".zshrc.pre-plugins.d.ng/00-core/10-command-assurance-system.zsh"
        ".zshrc.pre-plugins.d.ng/00-core/15-environment-validation.zsh"
        ".zshrc.d.ng/90-finalize/10-environment-health-check.zsh"
    )

    for ng_file in "${critical_ng_files[@]}"; do
        local full_path="${ZDOTDIR:-$HOME/.config/zsh}/$ng_file"
        if [[ -f "$full_path" && ! -r "$full_path" ]]; then
            echo "# [HEAL] CONFIG: Fixing permissions for: $ng_file" >&2
            ((config_healing_actions++))

            if chmod 644 "$full_path" 2>/dev/null; then
                echo "# [HEAL] CONFIG SUCCESS: Fixed permissions for: $ng_file" >&2
                ((config_healing_successes++))
            fi
        fi
    done

    # Repair corrupted .ng cache files
    local ng_cache_dir="${ZDOTDIR:-$HOME/.config/zsh}/.ng-cache"
    if [[ -d "$ng_cache_dir" ]]; then
        local -a cache_files=("$ng_cache_dir"/*.cache)
        for cache_file in "${cache_files[@]}"; do
            if [[ -f "$cache_file" && ! -s "$cache_file" ]]; then
                echo "# [HEAL] CONFIG: Removing corrupted cache file: ${cache_file##*/}" >&2
                ((config_healing_actions++))

                if rm -f "$cache_file" 2>/dev/null; then
                    echo "# [HEAL] CONFIG SUCCESS: Removed corrupted cache: ${cache_file##*/}" >&2
                    ((config_healing_successes++))
                fi
            fi
        done
    fi

    # Export configuration healing results
    export _NG_HEAL_CONFIG_ACTIONS="$config_healing_actions"
    export _NG_HEAL_CONFIG_SUCCESSES="$config_healing_successes"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [HEAL] Configuration healing complete: $config_healing_successes/$config_healing_actions successful" >&2
    }

    return 0
}

# Self-optimizing .ng performance tuning
optimize_ng_performance_automatically() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [HEAL] Self-optimizing .ng performance..." >&2

    local perf_optimizations=0
    local perf_improvements=0

    # Optimize based on performance context
    local performance_context="${_NG_SYSTEM_CONTEXTS[performance_context]:-unknown}"
    case "$performance_context" in
        "slow"|"degraded")
            echo "# [HEAL] PERF: Applying aggressive optimizations for slow system..." >&2
            ((perf_optimizations++))

            # Enable aggressive caching
            if typeset -f path_optimization_system >/dev/null 2>&1; then
                path_optimization_system && {
                    echo "# [HEAL] PERF SUCCESS: PATH optimized for performance" >&2
                    ((perf_improvements++))
                }
            fi

            # Optimize completion cache
            if typeset -f optimize_completion_performance >/dev/null 2>&1; then
                optimize_completion_performance && {
                    echo "# [HEAL] PERF SUCCESS: Completion optimized for performance" >&2
                    ((perf_improvements++))
                }
            fi
            ;;
    esac

    # Optimize based on detected performance issues
    local perf_issues="${#_NG_PERF_ISSUES[@]}"
    if [[ "$perf_issues" -gt 0 ]]; then
        echo "# [HEAL] PERF: Addressing $perf_issues performance issues..." >&2
        ((perf_optimizations++))

        # Apply suggested optimizations
        if typeset -f generate_ng_optimization_suggestions >/dev/null 2>&1; then
            generate_ng_optimization_suggestions && {
                echo "# [HEAL] PERF SUCCESS: Performance optimization suggestions applied" >&2
                ((perf_improvements++))
            }
        fi
    fi

    # Optimize .ng system loading order if needed
    local ng_systems_loaded="${_NG_PERF_METRICS[ng_systems_loaded]:-0}"
    local ng_systems_failed="${_NG_PERF_METRICS[ng_systems_failed]:-0}"
    if [[ "$ng_systems_failed" -gt 0 ]] && [[ "$ng_systems_loaded" -gt 0 ]]; then
        echo "# [HEAL] PERF: Optimizing .ng system loading reliability..." >&2
        ((perf_optimizations++))

        # Record successful systems for prioritization
        echo "# [HEAL] PERF SUCCESS: .ng system loading order analyzed" >&2
        ((perf_improvements++))
    fi

    # Export performance optimization results
    export _NG_HEAL_PERF_OPTIMIZATIONS="$perf_optimizations"
    export _NG_HEAL_PERF_IMPROVEMENTS="$perf_improvements"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [HEAL] Performance optimization complete: $perf_improvements/$perf_optimizations successful" >&2
    }

    return 0
}

# Automatic recovery from .ng failures
recover_from_ng_failures() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [HEAL] Attempting automatic recovery from .ng failures..." >&2

    local recovery_attempts=0
    local recovery_successes=0

    # Detect critical .ng system failures
    local critical_issues=0

    # Check for PATH system failure
    if [[ "${_NG_PATH_HEALTH_STATUS:-unknown}" == "critical" ]]; then
        ((critical_issues++))
        echo "# [HEAL] RECOVERY: Critical PATH system failure detected" >&2
        ((recovery_attempts++))

        # Emergency PATH reconstruction
        export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
        if typeset -f intelligent_path_builder >/dev/null 2>&1; then
            intelligent_path_builder && {
                echo "# [HEAL] RECOVERY SUCCESS: PATH system reconstructed" >&2
                ((recovery_successes++))
            }
        fi
    fi

    # Check for command system failure
    if [[ "${_NG_COMMAND_HEALTH_STATUS:-unknown}" == "critical" ]]; then
        ((critical_issues++))
        echo "# [HEAL] RECOVERY: Critical command system failure detected" >&2
        ((recovery_attempts++))

        # Emergency command system restoration
        if typeset -f setup_intelligent_fallbacks >/dev/null 2>&1; then
            setup_intelligent_fallbacks && {
                echo "# [HEAL] RECOVERY SUCCESS: Command system restored" >&2
                ((recovery_successes++))
            }
        fi
    fi

    # Check for environment system failure
    if [[ "${_NG_ENV_HEALTH_STATUS:-unknown}" == "critical" ]]; then
        ((critical_issues++))
        echo "# [HEAL] RECOVERY: Critical environment system failure detected" >&2
        ((recovery_attempts++))

        # Emergency environment restoration
        if typeset -f declare_global_variables_properly >/dev/null 2>&1; then
            declare_global_variables_properly && {
                echo "# [HEAL] RECOVERY SUCCESS: Environment system restored" >&2
                ((recovery_successes++))
            }
        fi
    fi

    # Check for total .ng system failure
    local total_ng_systems=8  # Total number of .ng prevention systems
    local working_ng_systems=0

    [[ "${_NG_INTELLIGENT_PATH_LOADED:-false}" == "true" ]] && ((working_ng_systems++))
    [[ "${_NG_COMMAND_ASSURANCE_LOADED:-false}" == "true" ]] && ((working_ng_systems++))
    [[ "${_NG_ENVIRONMENT_VALIDATION_LOADED:-false}" == "true" ]] && ((working_ng_systems++))
    [[ "${_NG_INTELLIGENT_PLUGIN_MANAGER_LOADED:-false}" == "true" ]] && ((working_ng_systems++))
    [[ "${_NG_COMPLETION_INTELLIGENCE_LOADED:-false}" == "true" ]] && ((working_ng_systems++))
    [[ "${_NG_CONFIG_INTEGRITY_MONITOR_LOADED:-false}" == "true" ]] && ((working_ng_systems++))
    [[ "${_NG_PERFORMANCE_MONITOR_LOADED:-false}" == "true" ]] && ((working_ng_systems++))
    [[ "${_NG_PREDICTIVE_HEALTH_MONITOR_LOADED:-false}" == "true" ]] && ((working_ng_systems++))

    local ng_system_failure_rate=$(((total_ng_systems - working_ng_systems) * 100 / total_ng_systems))

    if [[ "$ng_system_failure_rate" -gt 50 ]]; then
        echo "# [HEAL] RECOVERY: Critical .ng architecture failure detected ($ng_system_failure_rate% failure rate)" >&2
        ((recovery_attempts++))

        # Emergency .ng system restoration
        echo "# [HEAL] RECOVERY: Attempting emergency .ng system restoration..." >&2

        # Try to reload core .ng systems
        local systems_restored=0
        if [[ -f "${ZDOTDIR:-$HOME/.config/zsh}/.zshrc.pre-plugins.d.ng/00-core/05-intelligent-path-system.zsh" ]]; then
            source "${ZDOTDIR:-$HOME/.config/zsh}/.zshrc.pre-plugins.d.ng/00-core/05-intelligent-path-system.zsh" && ((systems_restored++))
        fi

        if [[ "$systems_restored" -gt 0 ]]; then
            echo "# [HEAL] RECOVERY SUCCESS: $systems_restored .ng systems restored" >&2
            ((recovery_successes++))
        fi
    fi

    # Export recovery results
    export _NG_HEAL_RECOVERY_ATTEMPTS="$recovery_attempts"
    export _NG_HEAL_RECOVERY_SUCCESSES="$recovery_successes"
    export _NG_HEAL_CRITICAL_ISSUES="$critical_issues"
    export _NG_HEAL_NG_SYSTEM_FAILURE_RATE="$ng_system_failure_rate"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [HEAL] Recovery complete: $recovery_successes/$recovery_attempts successful, $critical_issues critical issues" >&2
    }

    return 0
}

# Self-healing system diagnostics and reporting
ng_self_healing_doctor() {
    echo "🏥 .NG Self-Healing System - Health & Recovery Report"
    echo "===================================================="
    echo

    echo "🔍 Issue Detection Status:"
    echo "  Issues Detected: ${_NG_HEAL_ISSUES_DETECTED:-0}"
    echo "  Issues Healed: ${_NG_HEAL_ISSUES_HEALED:-0}"
    echo "  Healing Attempts: ${_NG_HEAL_ATTEMPTS:-0}"
    echo "  Success Rate: ${_NG_HEAL_SUCCESS_RATE:-0}%"
    echo

    if [[ "${#_NG_ISSUES_DETECTED[@]}" -gt 0 ]]; then
        echo "🚨 Issues Detected:"
        for issue in "${_NG_ISSUES_DETECTED[@]}"; do
            echo "  • $issue"
        done
        echo
    fi

    if [[ "${#_NG_HEALING_ACTIONS_TAKEN[@]}" -gt 0 ]]; then
        echo "🔧 Healing Actions Taken:"
        for action in "${_NG_HEALING_ACTIONS_TAKEN[@]}"; do
            echo "  ✓ $action"
        done
        echo
    fi

    echo "🔌 Plugin System Healing:"
    echo "  Plugin Actions: ${_NG_HEAL_PLUGIN_ACTIONS:-0}"
    echo "  Plugin Successes: ${_NG_HEAL_PLUGIN_SUCCESSES:-0}"
    echo

    echo "⚙️ Configuration Healing:"
    echo "  Config Actions: ${_NG_HEAL_CONFIG_ACTIONS:-0}"
    echo "  Config Successes: ${_NG_HEAL_CONFIG_SUCCESSES:-0}"
    echo

    echo "🚀 Performance Optimization:"
    echo "  Optimizations Applied: ${_NG_HEAL_PERF_OPTIMIZATIONS:-0}"
    echo "  Performance Improvements: ${_NG_HEAL_PERF_IMPROVEMENTS:-0}"
    echo

    echo "🆘 Critical Recovery Status:"
    echo "  Recovery Attempts: ${_NG_HEAL_RECOVERY_ATTEMPTS:-0}"
    echo "  Recovery Successes: ${_NG_HEAL_RECOVERY_SUCCESSES:-0}"
    echo "  Critical Issues: ${_NG_HEAL_CRITICAL_ISSUES:-0}"
    echo "  .NG System Failure Rate: ${_NG_HEAL_NG_SYSTEM_FAILURE_RATE:-0}%"
    echo

    # Overall system health assessment
    local overall_health="healthy"
    local critical_issues="${_NG_HEAL_CRITICAL_ISSUES:-0}"
    local failure_rate="${_NG_HEAL_NG_SYSTEM_FAILURE_RATE:-0}"

    if [[ "$critical_issues" -gt 2 ]] || [[ "$failure_rate" -gt 50 ]]; then
        overall_health="critical"
    elif [[ "$critical_issues" -gt 0 ]] || [[ "$failure_rate" -gt 25 ]]; then
        overall_health="degraded"
    elif [[ "${_NG_HEAL_ISSUES_DETECTED:-0}" -gt 0 ]]; then
        overall_health="minor_issues"
    fi

    echo "🏥 Overall System Health: $overall_health"

    if [[ "$overall_health" == "critical" ]]; then
        echo
        echo "🚨 CRITICAL RECOMMENDATIONS:"
        echo "  • Multiple critical issues require immediate attention"
        echo "  • Consider manual intervention for unresolved issues"
        echo "  • Run full system diagnostics: ng_environment_doctor"
        echo "  • Consider emergency backup and restore procedures"
    elif [[ "$overall_health" == "degraded" ]]; then
        echo
        echo "⚠️ RECOMMENDATIONS:"
        echo "  • Monitor system health closely"
        echo "  • Address remaining issues proactively"
        echo "  • Consider preventive maintenance"
    fi

    return 0
}

# Manual healing trigger
ng_self_heal() {
    echo "🏥 .NG Self-Healing System - Manual Trigger"
    echo "==========================================="
    echo

    echo "Starting comprehensive self-healing process..."

    # Execute all healing systems
    detect_and_heal_ng_issues
    heal_ng_plugin_system
    repair_ng_configuration_automatically
    optimize_ng_performance_automatically
    recover_from_ng_failures

    echo
    echo "Self-healing complete."
    echo "Issues detected: ${_NG_HEAL_ISSUES_DETECTED:-0}"
    echo "Issues healed: ${_NG_HEAL_ISSUES_HEALED:-0}"
    echo "Overall success rate: ${_NG_HEAL_SUCCESS_RATE:-0}%"

    return 0
}

# =============================================================================
# INITIALIZE SELF-HEALING SYSTEM
# =============================================================================

[[ "$ZSH_DEBUG" == "1" ]] && echo "# [HEAL] Initializing self-healing system..." >&2

# 1. Detect and heal .ng issues
detect_and_heal_ng_issues

# 2. Heal plugin system
heal_ng_plugin_system

# 3. Repair configuration automatically
repair_ng_configuration_automatically

# 4. Optimize performance automatically
optimize_ng_performance_automatically

# 5. Recover from critical failures
recover_from_ng_failures

# Export functions for use by other .ng systems
typeset -gf detect_and_heal_ng_issues heal_ng_plugin_system
typeset -gf repair_ng_configuration_automatically optimize_ng_performance_automatically
typeset -gf recover_from_ng_failures ng_self_healing_doctor ng_self_heal

[[ "$ZSH_DEBUG" == "1" ]] && echo "# [HEAL] Self-healing system initialized successfully" >&2

# =============================================================================
# .NG INTEGRATION STATUS
# =============================================================================
export _NG_SELF_HEALING_SYSTEM_LOADED="true"
export _NG_SELF_HEALING_VERSION="1.0.0"
