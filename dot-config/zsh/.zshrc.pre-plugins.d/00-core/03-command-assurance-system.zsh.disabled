# Command Assurance System for .NG Architecture
# This file replaces emergency command function overrides with intelligent command management
# File: 10-command-assurance-system.zsh
# Target: Replace emergency command fixes in zsh_zshenv.zsh and 000-emergency-system-fix.zsh

[[ "$ZSH_DEBUG" == "1" ]] && {
    printf "# ++++++ %s ++++++++++++++++++++++++++++++++++++\n" "$0" >&2
}

# =============================================================================
# COMMAND ASSURANCE SYSTEM (.NG-NATIVE)
# =============================================================================
# Replaces emergency command function overrides with proactive, intelligent
# command discovery and fallback management integrated into .ng architecture

# Global command registry for tracking command availability
typeset -gA _NG_COMMAND_REGISTRY
typeset -gA _NG_COMMAND_FALLBACKS
typeset -gA _NG_COMMAND_LOCATIONS
typeset -gA _NG_MISSING_COMMANDS

# Essential system commands that must be available
typeset -ga _NG_CRITICAL_COMMANDS=(
    "cat" "sed" "tr" "uname" "dirname" "basename"
    "ls" "grep" "awk" "sort" "uniq" "head" "tail"
)

# Development commands that are important but not critical
typeset -ga _NG_DEVELOPMENT_COMMANDS=(
    "cc" "make" "ld" "git" "curl" "wget"
)

# Proactive command discovery and mapping
intelligent_command_discovery() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Starting intelligent command discovery..." >&2

    local command_count=0
    local missing_count=0

    # Discover critical system commands
    for cmd in "${_NG_CRITICAL_COMMANDS[@]}"; do
        local cmd_path
        if cmd_path=$(command -v "$cmd" 2>/dev/null); then
            _NG_COMMAND_REGISTRY["$cmd"]="available"
            _NG_COMMAND_LOCATIONS["$cmd"]="$cmd_path"
            ((command_count++))
            [[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Found critical command: $cmd at $cmd_path" >&2
        else
            _NG_COMMAND_REGISTRY["$cmd"]="missing"
            _NG_MISSING_COMMANDS["$cmd"]="critical"
            ((missing_count++))
            echo "# [CMD] WARNING: Missing critical command: $cmd" >&2
        fi
    done

    # Discover development commands
    for cmd in "${_NG_DEVELOPMENT_COMMANDS[@]}"; do
        local cmd_path
        if cmd_path=$(command -v "$cmd" 2>/dev/null); then
            _NG_COMMAND_REGISTRY["$cmd"]="available"
            _NG_COMMAND_LOCATIONS["$cmd"]="$cmd_path"
            ((command_count++))
            [[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Found development command: $cmd at $cmd_path" >&2
        else
            _NG_COMMAND_REGISTRY["$cmd"]="missing"
            _NG_MISSING_COMMANDS["$cmd"]="development"
        fi
    done

    # Set global status
    export _NG_COMMANDS_DISCOVERED="$command_count"
    export _NG_COMMANDS_MISSING="$missing_count"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [CMD] Discovery complete: $command_count found, $missing_count missing" >&2
    }

    return 0
}

# Intelligent fallback command selection
setup_intelligent_fallbacks() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Setting up intelligent command fallbacks..." >&2

    # Define fallback strategies for critical commands
    local -A fallback_strategies=(
        ["sed"]="/usr/bin/sed /bin/sed"
        ["tr"]="/usr/bin/tr /bin/tr"
        ["uname"]="/usr/bin/uname /bin/uname"
        ["dirname"]="/usr/bin/dirname /bin/dirname"
        ["basename"]="/usr/bin/basename /bin/basename"
        ["cat"]="/bin/cat /usr/bin/cat"
        ["ls"]="/bin/ls /usr/bin/ls"
        ["grep"]="/usr/bin/grep /bin/grep"
        ["awk"]="/usr/bin/awk /bin/awk"
        ["sort"]="/usr/bin/sort /bin/sort"
        ["cc"]="/usr/bin/cc /usr/bin/clang /usr/bin/gcc"
        ["make"]="/usr/bin/make /usr/local/bin/make"
        ["ld"]="/usr/bin/ld /usr/bin/ld64"
    )

    # Set up fallbacks for missing commands
    for cmd in "${!fallback_strategies[@]}"; do
        if [[ "${_NG_COMMAND_REGISTRY[$cmd]}" == "missing" ]]; then
            local fallback_found=false
            local -a candidates
            read -A candidates <<< "${fallback_strategies[$cmd]}"

            for candidate in "${candidates[@]}"; do
                if [[ -x "$candidate" ]]; then
                    _NG_COMMAND_FALLBACKS["$cmd"]="$candidate"
                    _NG_COMMAND_REGISTRY["$cmd"]="fallback"
                    fallback_found=true
                    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Fallback for $cmd: $candidate" >&2
                    break
                fi
            done

            if [[ "$fallback_found" == "false" ]]; then
                echo "# [CMD] ERROR: No fallback found for critical command: $cmd" >&2
            fi
        fi
    done

    return 0
}

# Command aliasing for missing tools with suggestions
setup_command_aliases() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Setting up command aliases and wrappers..." >&2

    # Create safe command wrappers for critical commands
    for cmd in "${_NG_CRITICAL_COMMANDS[@]}"; do
        local cmd_status="${_NG_COMMAND_REGISTRY[$cmd]}"

        case "$cmd_status" in
            "available")
                # Command is available, create a simple alias to the full path for performance
                local cmd_path="${_NG_COMMAND_LOCATIONS[$cmd]}"
                alias "$cmd"="$cmd_path"
                ;;
            "fallback")
                # Command has a fallback, create wrapper function
                local fallback_path="${_NG_COMMAND_FALLBACKS[$cmd]}"
                eval "
                function $cmd() {
                    [[ -n \"\$ZSH_DEBUG\" ]] && echo \"# [CMD] Using fallback for $cmd: $fallback_path\" >&2
                    \"$fallback_path\" \"\$@\"
                }
                "
                ;;
            "missing")
                # Command is missing, create error wrapper with suggestions
                eval "
                function $cmd() {
                    echo \"# [CMD] ERROR: Command '$cmd' not available on this system\" >&2
                    echo \"# [CMD] Suggestion: Install command line tools or check PATH\" >&2
                    if [[ '$cmd' == 'cc' ]] || [[ '$cmd' == 'make' ]] || [[ '$cmd' == 'ld' ]]; then
                        echo \"# [CMD] For development tools, try: xcode-select --install\" >&2
                    fi
                    return 127
                }
                "
                ;;
        esac
    done

    return 0
}

# Tool installation guidance and automation
provide_installation_guidance() {
    local missing_critical=$(echo "${_NG_MISSING_COMMANDS[@]}" | grep -c "critical" 2>/dev/null || echo "0")

    if [[ "$missing_critical" -gt 0 ]]; then
        echo "# [CMD] SYSTEM HEALTH WARNING: $missing_critical critical commands missing" >&2
        echo "# [CMD] System may not function properly until these are resolved:" >&2

        for cmd in "${!_NG_MISSING_COMMANDS[@]}"; do
            if [[ "${_NG_MISSING_COMMANDS[$cmd]}" == "critical" ]]; then
                echo "#       - $cmd" >&2

                # Provide specific installation guidance
                case "$cmd" in
                    "cc"|"make"|"ld")
                        echo "#         → Install with: xcode-select --install" >&2
                        ;;
                    "git")
                        echo "#         → Install with: xcode-select --install or brew install git" >&2
                        ;;
                    "curl"|"wget")
                        echo "#         → Usually pre-installed; check PATH or reinstall command line tools" >&2
                        ;;
                    *)
                        echo "#         → Usually pre-installed; check PATH configuration" >&2
                        ;;
                esac
            fi
        done

        echo "# [CMD] Run 'ng_command_doctor' for detailed diagnostics" >&2
    fi

    return 0
}

# Graceful degradation for missing commands without errors
setup_graceful_degradation() {
    # For non-critical missing commands, set up silent fallbacks
    local -A graceful_fallbacks=(
        ["wget"]="curl -O"
        ["curl"]="wget"
        ["vim"]="nano"
        ["nano"]="vi"
        ["less"]="more"
        ["bat"]="cat"
        ["exa"]="ls"
    )

    for cmd in "${!graceful_fallbacks[@]}"; do
        if [[ "${_NG_COMMAND_REGISTRY[$cmd]}" == "missing" ]]; then
            local fallback_cmd="${graceful_fallbacks[$cmd]%% *}"  # Get first word
            if command -v "$fallback_cmd" >/dev/null 2>&1; then
                local fallback_full="${graceful_fallbacks[$cmd]}"
                eval "
                function $cmd() {
                    [[ -n \"\$ZSH_DEBUG\" ]] && echo \"# [CMD] Using graceful fallback for $cmd: $fallback_full\" >&2
                    $fallback_full \"\$@\"
                }
                "
                [[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Graceful fallback for $cmd: $fallback_full" >&2
            fi
        fi
    done

    return 0
}

# Command health monitoring and validation
validate_command_health() {
    local health_status="healthy"
    local critical_missing=0
    local development_missing=0

    # Count missing commands by category
    for cmd in "${!_NG_MISSING_COMMANDS[@]}"; do
        case "${_NG_MISSING_COMMANDS[$cmd]}" in
            "critical")
                ((critical_missing++))
                ;;
            "development")
                ((development_missing++))
                ;;
        esac
    done

    # Determine overall health status
    if [[ "$critical_missing" -gt 0 ]]; then
        health_status="critical"
    elif [[ "$development_missing" -gt 3 ]]; then
        health_status="degraded"
    fi

    # Export health status for monitoring
    export _NG_COMMAND_HEALTH_STATUS="$health_status"
    export _NG_COMMAND_CRITICAL_MISSING="$critical_missing"
    export _NG_COMMAND_DEVELOPMENT_MISSING="$development_missing"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [CMD] Command health status: $health_status" >&2
        echo "# [CMD] Critical missing: $critical_missing, Development missing: $development_missing" >&2
    }

    return 0
}

# Command doctor function for diagnostics
ng_command_doctor() {
    echo "🔍 .NG Command Assurance System - Health Check"
    echo "=============================================="
    echo

    echo "📊 System Status:"
    echo "  Health Status: ${_NG_COMMAND_HEALTH_STATUS:-unknown}"
    echo "  Commands Found: ${_NG_COMMANDS_DISCOVERED:-0}"
    echo "  Commands Missing: ${_NG_COMMANDS_MISSING:-0}"
    echo "  Critical Missing: ${_NG_COMMAND_CRITICAL_MISSING:-0}"
    echo "  Development Missing: ${_NG_COMMAND_DEVELOPMENT_MISSING:-0}"
    echo

    if [[ "${#_NG_MISSING_COMMANDS[@]}" -gt 0 ]]; then
        echo "❌ Missing Commands:"
        for cmd in "${!_NG_MISSING_COMMANDS[@]}"; do
            local category="${_NG_MISSING_COMMANDS[$cmd]}"
            local priority_icon="⚠️"
            [[ "$category" == "critical" ]] && priority_icon="🔴"
            echo "  $priority_icon $cmd ($category)"
        done
        echo
    fi

    if [[ "${#_NG_COMMAND_FALLBACKS[@]}" -gt 0 ]]; then
        echo "🔄 Active Fallbacks:"
        for cmd in "${!_NG_COMMAND_FALLBACKS[@]}"; do
            echo "  → $cmd: ${_NG_COMMAND_FALLBACKS[$cmd]}"
        done
        echo
    fi

    echo "💡 Available Commands:"
    for cmd in "${!_NG_COMMAND_LOCATIONS[@]}"; do
        echo "  ✅ $cmd: ${_NG_COMMAND_LOCATIONS[$cmd]}"
    done
    echo

    # Provide recommendations
    if [[ "${_NG_COMMAND_CRITICAL_MISSING:-0}" -gt 0 ]]; then
        echo "🚨 RECOMMENDATIONS:"
        echo "  1. Install Xcode Command Line Tools: xcode-select --install"
        echo "  2. Verify PATH includes system directories: echo \$PATH"
        echo "  3. Check system integrity if basic commands are missing"
        echo
    fi

    return 0
}

# =============================================================================
# INITIALIZE COMMAND ASSURANCE SYSTEM
# =============================================================================

[[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Initializing command assurance system..." >&2

# 1. Discover available commands
intelligent_command_discovery

# 2. Set up intelligent fallbacks
setup_intelligent_fallbacks

# 3. Create command aliases and wrappers
setup_command_aliases

# 4. Provide installation guidance for missing commands
provide_installation_guidance

# 5. Set up graceful degradation
setup_graceful_degradation

# 6. Validate overall command health
validate_command_health

# Export functions for use by other .ng systems
typeset -gf intelligent_command_discovery setup_intelligent_fallbacks setup_command_aliases
typeset -gf provide_installation_guidance setup_graceful_degradation validate_command_health
typeset -gf ng_command_doctor

[[ "$ZSH_DEBUG" == "1" ]] && echo "# [CMD] Command assurance system initialized successfully" >&2

# =============================================================================
# .NG INTEGRATION STATUS
# =============================================================================
export _NG_COMMAND_ASSURANCE_LOADED="true"
export _NG_COMMAND_SYSTEM_VERSION="1.0.0"
