# Environment Self-Validation System for .NG Architecture
# This file replaces emergency environment fixes with proactive environment management
# File: 15-environment-validation.zsh
# Target: Replace emergency environment fixes and global variable warnings

[[ "$ZSH_DEBUG" == "1" ]] && {
    printf "# ++++++ %s ++++++++++++++++++++++++++++++++++++\n" "$0" >&2
}

# =============================================================================
# ENVIRONMENT SELF-VALIDATION SYSTEM (.NG-NATIVE)
# =============================================================================
# Replaces emergency environment fixes with proactive, intelligent environment
# validation and auto-correction integrated into .ng architecture

# Global environment registry for tracking variable states
typeset -gA _NG_ENV_REGISTRY
typeset -gA _NG_ENV_DEFAULTS
typeset -gA _NG_ENV_VALIDATORS
typeset -gA _NG_ENV_ISSUES

# Essential environment variables that should be properly set
typeset -ga _NG_CRITICAL_ENV_VARS=(
    "HOME" "USER" "SHELL" "PATH" "PWD" "ZDOTDIR"
)

# Development environment variables
typeset -ga _NG_DEVELOPMENT_ENV_VARS=(
    "CC" "CXX" "CPP" "DEVELOPER_DIR" "SDKROOT"
)

# Tool-specific environment variables
typeset -ga _NG_TOOL_ENV_VARS=(
    "CARGO_TARGET_DIR" "BUN_INSTALL" "DOTNET_CLI_HOME" "DOTNET_ROOT"
    "NVM_SCRIPT_SOURCE" "SSH_AGENT_PID"
)

# Automatic environment variable validation
validate_environment_variables() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Starting environment validation..." >&2

    local validation_errors=0
    local validation_warnings=0
    local validation_fixes=0

    # Validate critical environment variables
    for var in "${_NG_CRITICAL_ENV_VARS[@]}"; do
        local var_value="${(P)var}"
        local validation_result="valid"

        case "$var" in
            "HOME")
                if [[ -z "$var_value" ]] || [[ ! -d "$var_value" ]]; then
                    echo "# [ENV] CRITICAL: HOME directory invalid or missing: '$var_value'" >&2
                    _NG_ENV_ISSUES["$var"]="critical"
                    ((validation_errors++))
                    validation_result="critical"
                fi
                ;;
            "USER")
                if [[ -z "$var_value" ]]; then
                    echo "# [ENV] ERROR: USER not set" >&2
                    _NG_ENV_ISSUES["$var"]="error"
                    ((validation_errors++))
                    validation_result="error"
                fi
                ;;
            "SHELL")
                if [[ -z "$var_value" ]] || [[ ! -x "$var_value" ]]; then
                    echo "# [ENV] WARNING: SHELL not properly set: '$var_value'" >&2
                    _NG_ENV_ISSUES["$var"]="warning"
                    ((validation_warnings++))
                    validation_result="warning"
                fi
                ;;
            "PATH")
                if [[ -z "$var_value" ]]; then
                    echo "# [ENV] CRITICAL: PATH is empty" >&2
                    _NG_ENV_ISSUES["$var"]="critical"
                    ((validation_errors++))
                    validation_result="critical"
                elif [[ "${#var_value}" -lt 20 ]]; then
                    echo "# [ENV] WARNING: PATH suspiciously short: '$var_value'" >&2
                    _NG_ENV_ISSUES["$var"]="warning"
                    ((validation_warnings++))
                    validation_result="warning"
                fi
                ;;
            "ZDOTDIR")
                if [[ -z "$var_value" ]]; then
                    # Auto-fix: Set ZDOTDIR to default if missing
                    export ZDOTDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
                    echo "# [ENV] AUTO-FIX: Set ZDOTDIR to default: $ZDOTDIR" >&2
                    ((validation_fixes++))
                    validation_result="auto-fixed"
                elif [[ ! -d "$var_value" ]]; then
                    echo "# [ENV] WARNING: ZDOTDIR directory doesn't exist: '$var_value'" >&2
                    _NG_ENV_ISSUES["$var"]="warning"
                    ((validation_warnings++))
                    validation_result="warning"
                fi
                ;;
        esac

        _NG_ENV_REGISTRY["$var"]="$validation_result"
        [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Validated $var: $validation_result" >&2
    done

    # Set validation status
    export _NG_ENV_VALIDATION_ERRORS="$validation_errors"
    export _NG_ENV_VALIDATION_WARNINGS="$validation_warnings"
    export _NG_ENV_VALIDATION_FIXES="$validation_fixes"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ENV] Validation complete: $validation_errors errors, $validation_warnings warnings, $validation_fixes fixes" >&2
    }

    return 0
}

# Missing variable detection and auto-setting
detect_and_set_missing_variables() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Detecting and setting missing variables..." >&2

    # Development environment variables with intelligent defaults
    local -A dev_var_defaults=(
        ["CC"]="/usr/bin/cc"
        ["CXX"]="/usr/bin/c++"
        ["CPP"]="/usr/bin/cpp"
        ["DEVELOPER_DIR"]="/Applications/Xcode.app/Contents/Developer"
    )

    # Check and set development variables
    for var in "${_NG_DEVELOPMENT_ENV_VARS[@]}"; do
        local var_value="${(P)var}"

        if [[ -z "$var_value" ]]; then
            case "$var" in
                "CC"|"CXX"|"CPP")
                    local default_value="${dev_var_defaults[$var]}"
                    if [[ -x "$default_value" ]]; then
                        typeset -gx "$var"="$default_value"
                        echo "# [ENV] AUTO-SET: $var=$default_value" >&2
                        _NG_ENV_REGISTRY["$var"]="auto-set"
                    else
                        echo "# [ENV] WARNING: $var not set and default not available: $default_value" >&2
                        _NG_ENV_REGISTRY["$var"]="missing"
                    fi
                    ;;
                "DEVELOPER_DIR")
                    # Try multiple possible locations
                    local -a possible_dirs=(
                        "/Applications/Xcode.app/Contents/Developer"
                        "/Library/Developer/CommandLineTools"
                    )

                    local found_dir=""
                    for dir in "${possible_dirs[@]}"; do
                        if [[ -d "$dir" ]]; then
                            found_dir="$dir"
                            break
                        fi
                    done

                    if [[ -n "$found_dir" ]]; then
                        export DEVELOPER_DIR="$found_dir"
                        echo "# [ENV] AUTO-SET: DEVELOPER_DIR=$found_dir" >&2
                        _NG_ENV_REGISTRY["$var"]="auto-set"
                    else
                        echo "# [ENV] WARNING: No developer directory found for DEVELOPER_DIR" >&2
                        _NG_ENV_REGISTRY["$var"]="missing"
                    fi
                    ;;
                "SDKROOT")
                    # Set SDKROOT if xcrun is available
                    if command -v xcrun >/dev/null 2>&1; then
                        local sdk_path
                        if sdk_path=$(xcrun --show-sdk-path 2>/dev/null) && [[ -d "$sdk_path" ]]; then
                            export SDKROOT="$sdk_path"
                            echo "# [ENV] AUTO-SET: SDKROOT=$sdk_path" >&2
                            _NG_ENV_REGISTRY["$var"]="auto-set"
                        fi
                    fi
                    ;;
            esac
        else
            _NG_ENV_REGISTRY["$var"]="present"
        fi
    done

    return 0
}

# Environment consistency checking across startup phases
check_environment_consistency() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Checking environment consistency..." >&2

    local consistency_issues=0

    # Check for environment drift (variables that changed unexpectedly)
    if [[ -n "$_NG_ENV_INITIAL_PATH" ]] && [[ "$PATH" != "$_NG_ENV_INITIAL_PATH" ]]; then
        local path_changes=$((${#PATH} - ${#_NG_ENV_INITIAL_PATH}))
        if [[ "$path_changes" -gt 100 ]] || [[ "$path_changes" -lt -100 ]]; then
            echo "# [ENV] WARNING: Significant PATH changes detected (${path_changes} characters)" >&2
            ((consistency_issues++))
        fi
    fi

    # Check for variables that should not change during startup
    local -a immutable_vars=("HOME" "USER")
    for var in "${immutable_vars[@]}"; do
        local initial_var="_NG_ENV_INITIAL_${var}"
        local current_value="${(P)var}"
        local initial_value="${(P)initial_var}"

        if [[ -n "$initial_value" ]] && [[ "$current_value" != "$initial_value" ]]; then
            echo "# [ENV] ERROR: Immutable variable $var changed: '$initial_value' → '$current_value'" >&2
            ((consistency_issues++))
        fi
    done

    # Set consistency status
    export _NG_ENV_CONSISTENCY_ISSUES="$consistency_issues"

    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Consistency check complete: $consistency_issues issues found" >&2

    return 0
}

# Automatic environment repair
repair_environment_issues() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Attempting environment repairs..." >&2

    local repairs_attempted=0
    local repairs_successful=0

    # Repair critical environment issues
    for var in "${!_NG_ENV_ISSUES[@]}"; do
        local issue_type="${_NG_ENV_ISSUES[$var]}"

        case "$var:$issue_type" in
            "PATH:critical")
                echo "# [ENV] REPAIR: Attempting PATH reconstruction..." >&2
                # Trigger PATH rebuild via intelligent PATH system
                if typeset -f intelligent_path_builder >/dev/null 2>&1; then
                    intelligent_path_builder
                    if [[ -n "$PATH" ]] && [[ "${#PATH}" -gt 20 ]]; then
                        echo "# [ENV] REPAIR SUCCESS: PATH reconstructed" >&2
                        unset "_NG_ENV_ISSUES[$var]"
                        ((repairs_successful++))
                    fi
                fi
                ((repairs_attempted++))
                ;;
            "ZDOTDIR:warning")
                echo "# [ENV] REPAIR: Creating ZDOTDIR directory..." >&2
                local zdotdir_value="${(P)var}"
                if mkdir -p "$zdotdir_value" 2>/dev/null; then
                    echo "# [ENV] REPAIR SUCCESS: Created ZDOTDIR: $zdotdir_value" >&2
                    unset "_NG_ENV_ISSUES[$var]"
                    ((repairs_successful++))
                fi
                ((repairs_attempted++))
                ;;
        esac
    done

    # Set repair status
    export _NG_ENV_REPAIRS_ATTEMPTED="$repairs_attempted"
    export _NG_ENV_REPAIRS_SUCCESSFUL="$repairs_successful"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ENV] Repair complete: $repairs_successful/$repairs_attempted successful" >&2
    }

    return 0
}

# Environment backup and restoration capabilities
backup_environment_state() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Creating environment backup..." >&2

    # Backup critical environment variables
    export _NG_ENV_INITIAL_PATH="$PATH"
    export _NG_ENV_INITIAL_HOME="$HOME"
    export _NG_ENV_INITIAL_USER="$USER"
    export _NG_ENV_INITIAL_SHELL="$SHELL"
    export _NG_ENV_INITIAL_ZDOTDIR="$ZDOTDIR"

    # Create timestamp for backup
    export _NG_ENV_BACKUP_TIMESTAMP="$(date +%s)"

    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Environment backup created at timestamp: $_NG_ENV_BACKUP_TIMESTAMP" >&2

    return 0
}

# Proper global variable declarations to prevent warnings
declare_global_variables_properly() {
    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Declaring global variables properly..." >&2

    # Pre-declare common tool variables to prevent "created globally" warnings
    typeset -g BUN_INSTALL="${BUN_INSTALL:-${XDG_DATA_HOME:-$HOME/.local/share}/bun}"
    typeset -g DOTNET_CLI_HOME="${DOTNET_CLI_HOME:-${XDG_DATA_HOME:-$HOME/.local/share}/dotnet}"
    typeset -g DOTNET_ROOT="${DOTNET_ROOT:-${XDG_DATA_HOME:-$HOME/.local/share}/dotnet}"
    typeset -g NVM_SCRIPT_SOURCE="${NVM_SCRIPT_SOURCE:-}"
    typeset -g SSH_AGENT_PID="${SSH_AGENT_PID:-}"

    # Pre-declare ZSH plugin variables to prevent warnings
    typeset -gxa ZSH_AUTOSUGGEST_STRATEGY
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)

    typeset -gxa GLOBALIAS_FILTER_VALUES
    GLOBALIAS_FILTER_VALUES=("sudo" "man" "which")

    # Pre-declare common arrays that might be created globally
    typeset -ga ZSH_HIGHLIGHT_HIGHLIGHTERS
    typeset -gA ZSH_HIGHLIGHT_STYLES

    [[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Global variables declared properly" >&2

    return 0
}

# Environment health monitoring
monitor_environment_health() {
    local health_status="healthy"
    local error_count="${_NG_ENV_VALIDATION_ERRORS:-0}"
    local warning_count="${_NG_ENV_VALIDATION_WARNINGS:-0}"
    local issue_count="${#_NG_ENV_ISSUES[@]}"

    # Determine overall health status
    if [[ "$error_count" -gt 0 ]] || [[ "$issue_count" -gt 2 ]]; then
        health_status="critical"
    elif [[ "$warning_count" -gt 2 ]] || [[ "$issue_count" -gt 0 ]]; then
        health_status="degraded"
    fi

    # Export health status
    export _NG_ENV_HEALTH_STATUS="$health_status"
    export _NG_ENV_TOTAL_ISSUES="$issue_count"

    [[ "$ZSH_DEBUG" == "1" ]] && {
        echo "# [ENV] Environment health: $health_status" >&2
        echo "# [ENV] Errors: $error_count, Warnings: $warning_count, Issues: $issue_count" >&2
    }

    return 0
}

# Environment doctor function for diagnostics
ng_environment_doctor() {
    echo "🔍 .NG Environment Validation System - Health Check"
    echo "=================================================="
    echo

    echo "📊 Environment Status:"
    echo "  Health Status: ${_NG_ENV_HEALTH_STATUS:-unknown}"
    echo "  Validation Errors: ${_NG_ENV_VALIDATION_ERRORS:-0}"
    echo "  Validation Warnings: ${_NG_ENV_VALIDATION_WARNINGS:-0}"
    echo "  Auto-Fixes Applied: ${_NG_ENV_VALIDATION_FIXES:-0}"
    echo "  Total Issues: ${_NG_ENV_TOTAL_ISSUES:-0}"
    echo

    if [[ "${#_NG_ENV_ISSUES[@]}" -gt 0 ]]; then
        echo "⚠️  Environment Issues:"
        for var in "${!_NG_ENV_ISSUES[@]}"; do
            local issue_type="${_NG_ENV_ISSUES[$var]}"
            local priority_icon="⚠️"
            [[ "$issue_type" == "critical" ]] && priority_icon="🔴"
            [[ "$issue_type" == "error" ]] && priority_icon="❌"
            echo "  $priority_icon $var: $issue_type"
        done
        echo
    fi

    echo "✅ Environment Variables Status:"
    for var in "${_NG_CRITICAL_ENV_VARS[@]}" "${_NG_DEVELOPMENT_ENV_VARS[@]}"; do
        local var_status="${_NG_ENV_REGISTRY[$var]:-unknown}"
        local var_value="${(P)var}"
        local status_icon="❓"

        case "$var_status" in
            "valid"|"present") status_icon="✅" ;;
            "auto-set"|"auto-fixed") status_icon="🔧" ;;
            "warning") status_icon="⚠️" ;;
            "error"|"critical"|"missing") status_icon="❌" ;;
        esac

        echo "  $status_icon $var ($var_status): ${var_value:-<unset>}"
    done
    echo

    if [[ "${_NG_ENV_VALIDATION_ERRORS:-0}" -gt 0 ]]; then
        echo "🚨 RECOMMENDATIONS:"
        echo "  1. Fix critical environment issues immediately"
        echo "  2. Check system PATH configuration"
        echo "  3. Verify home directory and user settings"
        echo "  4. Run environment repair: ng_environment_repair"
        echo
    fi

    return 0
}

# Environment repair function
ng_environment_repair() {
    echo "🔧 .NG Environment Repair System"
    echo "================================"
    echo

    echo "Starting environment repair process..."
    repair_environment_issues

    echo "Re-validating environment..."
    validate_environment_variables
    monitor_environment_health

    echo
    echo "Repair complete. Current status: ${_NG_ENV_HEALTH_STATUS:-unknown}"
    echo "Repairs attempted: ${_NG_ENV_REPAIRS_ATTEMPTED:-0}"
    echo "Repairs successful: ${_NG_ENV_REPAIRS_SUCCESSFUL:-0}"

    return 0
}

# =============================================================================
# INITIALIZE ENVIRONMENT VALIDATION SYSTEM
# =============================================================================

[[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Initializing environment validation system..." >&2

# 1. Create environment backup
backup_environment_state

# 2. Declare global variables properly to prevent warnings
declare_global_variables_properly

# 3. Validate environment variables
validate_environment_variables

# 4. Detect and set missing variables
detect_and_set_missing_variables

# 5. Check environment consistency
check_environment_consistency

# 6. Attempt repairs for critical issues
repair_environment_issues

# 7. Monitor overall environment health
monitor_environment_health

# Export functions for use by other .ng systems
typeset -gf validate_environment_variables detect_and_set_missing_variables
typeset -gf check_environment_consistency repair_environment_issues
typeset -gf backup_environment_state declare_global_variables_properly
typeset -gf monitor_environment_health ng_environment_doctor ng_environment_repair

[[ "$ZSH_DEBUG" == "1" ]] && echo "# [ENV] Environment validation system initialized successfully" >&2

# =============================================================================
# .NG INTEGRATION STATUS
# =============================================================================
export _NG_ENVIRONMENT_VALIDATION_LOADED="true"
export _NG_ENVIRONMENT_SYSTEM_VERSION="1.0.0"
