#!/usr/bin/env zsh
#=============================================================================
# File: zsh-config-backup
# Purpose: Create comprehensive backup of ZSH configuration
# Dependencies: tar (system built-in)
# Author: Configuration management system
# Last Modified: 2025-08-20
#=============================================================================

# Configuration
ZSH_CONFIG_BASE="${HOME}/.config/zsh"
BACKUP_BASE_DIR="$ZSH_CONFIG_BASE/.zsh-backups"
TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
BACKUP_DIR="$BACKUP_BASE_DIR/$TIMESTAMP"
MANIFEST="$BACKUP_DIR/manifest.txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
_log() {
    local level="$1"
    shift
    case "$level" in
        ERROR)     zsh_debug_echo -e "${RED}❌ ERROR: $*${NC}"  ;;
        SUCCESS)     zsh_debug_echo -e "${GREEN}✅ SUCCESS: $*${NC}" ;;
        WARNING)     zsh_debug_echo -e "${YELLOW}⚠️  WARNING: $*${NC}" ;;
        INFO)     zsh_debug_echo -e "${BLUE}ℹ️  INFO: $*${NC}" ;;
        *)     zsh_debug_echo "$*" ;;
    esac
}

# Create backup directory
_setup_backup_directory() {
    _log INFO "Creating backup directory: $BACKUP_DIR"

    if mkdir -p "$BACKUP_DIR"; then
        _log SUCCESS "Backup directory created successfully"
        return 0
    else
        _log ERROR "Failed to create backup directory: $BACKUP_DIR"
        return 1
    fi
}

# Create manifest file
_create_manifest() {
    _log INFO "Creating backup manifest"

    cat > "$MANIFEST" << EOF
#=============================================================================
# ZSH Configuration Backup Manifest
# Created: $(date)
# System: $(uname -a)
# User: $(whoami)
# Backup Location: $BACKUP_DIR
# Implementation Phase: Critical Setup (Task 1.2)
#=============================================================================

EOF

    _log SUCCESS "Manifest header created"
}

# Backup main configuration files
_backup_main_files() {
    _log INFO "Backing up main configuration files..."

    local backed_up_files=0
    local main_files=(
        "$HOME/.zshrc"
        "$HOME/.zshenv"
        "$HOME/.zprofile"
        "$ZSH_CONFIG_BASE/.zshrc"
        "$ZSH_CONFIG_BASE/.zshenv"
        "$ZSH_CONFIG_BASE/.p10k.zsh"
    )

        zsh_debug_echo "## Main Configuration Files" >> "$MANIFEST"

    for file in "${main_files[@]}"; do
        if [[ -f "$file" ]]; then
            local filename=$(basename "$file")
            local source_dir=$(dirname "$file")

            if cp "$file" "$BACKUP_DIR/"; then
                local lines=$(wc -l < "$file" 2>/dev/null || zsh_debug_echo "0")
                local size=$(stat -f%z "$file" 2>/dev/null || zsh_debug_echo "0")

                    zsh_debug_echo "- $filename: $lines lines, $size bytes (from $source_dir)" >> "$MANIFEST"
                _log SUCCESS "Backed up: $filename"
                ((backed_up_files++))
            else
                _log ERROR "Failed to backup: $file"
            fi
        fi
    done

        zsh_debug_echo "" >> "$MANIFEST"
    _log INFO "Backed up $backed_up_files main configuration files"
}

# Backup configuration directories
_backup_config_directories() {
    _log INFO "Backing up configuration directories..."

    local config_dirs=(
        "$ZSH_CONFIG_BASE/.zshrc.d"
        "$ZSH_CONFIG_BASE/.zshrc.pre-plugins.d"
        "$ZSH_CONFIG_BASE/.zshrc.add-plugins.d"
        "$ZSH_CONFIG_BASE/.zshrc.Darwin.d"
        "$ZSH_CONFIG_BASE/docs"
        "$ZSH_CONFIG_BASE/tests"
    )

        zsh_debug_echo "## Configuration Directories" >> "$MANIFEST"

    for dir in "${config_dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            local dir_name=$(basename "$dir")

            if cp -r "$dir" "$BACKUP_DIR/"; then
                local file_count=$(find "$dir" -type f 2>/dev/null | wc -l)
                local zsh_file_count=$(find "$dir" -name "*.zsh" -type f 2>/dev/null | wc -l)
                local total_lines=$(find "$dir" -name "*.zsh" -type f -exec cat {} \; 2>/dev/null | wc -l)

                    zsh_debug_echo "- $dir_name/: $file_count total files, $zsh_file_count zsh files, $total_lines lines of zsh code" >> "$MANIFEST"
                _log SUCCESS "Backed up directory: $dir_name"
            else
                _log ERROR "Failed to backup directory: $dir"
            fi
        fi
    done

        zsh_debug_echo "" >> "$MANIFEST"
}

# Backup important metadata files
_backup_metadata() {
    _log INFO "Backing up metadata and configuration files..."

    local metadata_files=(
        "$ZSH_CONFIG_BASE/README.md"
        "$ZSH_CONFIG_BASE/.gitignore"
        "$ZSH_CONFIG_BASE/FUNCTIONS_CATALOGUE.md"
        "$ZSH_CONFIG_BASE/.p10k.zsh"
    )

        zsh_debug_echo "## Metadata and Documentation" >> "$MANIFEST"

    for file in "${metadata_files[@]}"; do
        if [[ -f "$file" ]]; then
            local filename=$(basename "$file")

            if cp "$file" "$BACKUP_DIR/"; then
                local size=$(stat -f%z "$file" 2>/dev/null || zsh_debug_echo "0")
                    zsh_debug_echo "- $filename: $size bytes" >> "$MANIFEST"
                _log SUCCESS "Backed up metadata: $filename"
            fi
        fi
    done

        zsh_debug_echo "" >> "$MANIFEST"
}

# Create backup statistics
_create_backup_statistics() {
    _log INFO "Generating backup statistics..."

    local total_files=$(find "$BACKUP_DIR" -type f | wc -l)
    local total_dirs=$(find "$BACKUP_DIR" -type d | wc -l)
    local backup_size=$(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1)
    local zsh_files=$(find "$BACKUP_DIR" -name "*.zsh" | wc -l)
    local md_files=$(find "$BACKUP_DIR" -name "*.md" | wc -l)

    cat >> "$MANIFEST" << EOF
## Backup Statistics
- Total files: $total_files
- Total directories: $total_dirs
- ZSH configuration files: $zsh_files
- Documentation files: $md_files
- Total backup size: $backup_size
- Backup completion time: $(date)

## Backup Verification
- Backup directory: $BACKUP_DIR
- Manifest file: $MANIFEST
- Backup can be restored using: zsh-config-restore $TIMESTAMP

EOF

    _log SUCCESS "Backup statistics generated"
}

# Create compressed archive
_create_archive() {
    _log INFO "Creating compressed archive..."

    local archive_file="$BACKUP_DIR.tar.gz"

    if tar -czf "$archive_file" -C "$BACKUP_BASE_DIR" "$TIMESTAMP" 2>/dev/null; then
        local archive_size=$(du -sh "$archive_file" 2>/dev/null | cut -f1)
        _log SUCCESS "Archive created: $archive_file ($archive_size)"

        # Update manifest with archive information
            zsh_debug_echo "- Archive file: $archive_file" >> "$MANIFEST"
            zsh_debug_echo "- Archive size: $archive_size" >> "$MANIFEST"

        return 0
    else
        _log ERROR "Failed to create archive"
        return 1
    fi
}

# Verify backup integrity
_verify_backup() {
    _log INFO "Verifying backup integrity..."

    local issues=0

    # Check manifest exists
    if [[ ! -f "$MANIFEST" ]]; then
        _log ERROR "Manifest file missing"
        ((issues++))
    fi

    # Check essential files are backed up
    local essential_files=(".zshrc" ".zshenv")
    for file in "${essential_files[@]}"; do
        if [[ -f "$HOME/$file" ]] && [[ ! -f "$BACKUP_DIR/$file" ]]; then
            _log ERROR "Essential file not backed up: $file"
            ((issues++))
        fi
    done

    # Check archive integrity if it exists
    local archive_file="$BACKUP_DIR.tar.gz"
    if [[ -f "$archive_file" ]]; then
        if ! tar -tzf "$archive_file" >/dev/null 2>&1; then
            _log ERROR "Archive integrity check failed"
            ((issues++))
        fi
    fi

    if (( issues == 0 )); then
        _log SUCCESS "Backup integrity verified - no issues found"
        return 0
    else
        _log ERROR "Backup integrity check found $issues issues"
        return 1
    fi
}

# Main backup function
main() {
    # Save current working directory
    local original_cwd="$(pwd)"

    # Setup logging
    local log_date=$(date -u +%Y-%m-%d)
    local log_time=$(date -u +%H-%M-%S)
    local log_dir="${HOME}/.config/zsh/logs/$log_date"
    local log_file="$log_dir/zsh-config-backup_$log_time.log"

    # Create log directory
    mkdir -p "$log_dir"

    # Start logging
    exec 1> >(tee -a "$log_file")
    exec 2> >(tee -a "$log_file" >&2)

        zsh_debug_echo "🔄 ZSH Configuration Backup System"
        zsh_debug_echo "=================================="
        zsh_debug_echo "📅 Backup Started: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        zsh_debug_echo "📁 Backup location: $BACKUP_DIR"
        zsh_debug_echo "🕒 Timestamp: $TIMESTAMP"
        zsh_debug_echo "📋 Log File: $log_file"
        zsh_debug_echo ""

    # Execute backup steps
    _setup_backup_directory || {
        cd "$original_cwd" 2>/dev/null
        exit 1
    }
    _create_manifest || {
        cd "$original_cwd" 2>/dev/null
        exit 1
    }
    _backup_main_files || {
        cd "$original_cwd" 2>/dev/null
        exit 1
    }
    _backup_config_directories || {
        cd "$original_cwd" 2>/dev/null
        exit 1
    }
    _backup_metadata || {
        cd "$original_cwd" 2>/dev/null
        exit 1
    }
    _create_backup_statistics || {
        cd "$original_cwd" 2>/dev/null
        exit 1
    }
    _create_archive || {
        cd "$original_cwd" 2>/dev/null
        exit 1
    }
    _verify_backup || {
        cd "$original_cwd" 2>/dev/null
        exit 1
    }

        zsh_debug_echo ""
        zsh_debug_echo "🎉 Backup completed successfully!"
        zsh_debug_echo "📋 Manifest: $MANIFEST"
        zsh_debug_echo "📦 Archive: $BACKUP_DIR.tar.gz"
        zsh_debug_echo ""
        zsh_debug_echo "✅ Task 1.2 (Backup current configuration) - COMPLETE"

    # Restore original working directory
    cd "$original_cwd" || _log WARNING "Could not restore original directory: $original_cwd"

    return 0
}

# Run backup if called directly
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
