#!/usr/bin/env zsh
#=============================================================================
# File: zsh-performance-baseline
# Purpose: Record baseline performance metrics before optimization
# Dependencies: zsh
# Author: Configuration management system
# Last Modified: 2025-01-08
#=============================================================================

# Save and restore working directory, set up logging
_original_pwd="$(pwd)"
_log_date="$(date '+%Y-%m-%d')"
_log_dir="$HOME/.config/zsh/logs/$_log_date"
_log_file="$_log_dir/baseline-performance-$(date '+%H-%M-%S').log"

# Ensure log directory exists
[[ ! -d "$_log_dir" ]] && mkdir -p "$_log_dir"

# Redirect all output to log file and console
exec > >(tee -a "$_log_file") 2>&1

echo "==============================================================================" 
echo "ZSH Performance Baseline Measurement"
echo "Started: $(date)"
echo "Log file: $_log_file"
echo "=============================================================================="

# Function to measure ZSH startup time
measure_startup_time() {
    local iterations="${1:-10}"
    local temp_rc="/tmp/zshrc_test.$$"
    local results_file="/tmp/zsh_timing.$$.log"
    local times=()
    
    echo
    echo "üìä Measuring ZSH startup time (${iterations} iterations)..."
    
    # Create a temporary zshrc that sources our config and exits
    cat > "$temp_rc" <<'EOF'
# Enable profiling
zmodload zsh/zprof

# Source the actual configuration
source ~/.config/zsh/zshrc

# Output timing information and exit
zprof | head -20
echo "STARTUP_COMPLETE"
EOF
    
    # Run multiple iterations to get average
    for ((i=1; i<=iterations; i++)); do
        echo -n "  Iteration $i/$iterations: "
        
        # Measure startup time using time command
        local start_time=$(date +%s.%N)
        timeout 10s zsh -c "ZDOTDIR=/tmp zshrc=$temp_rc source $temp_rc" >/tmp/startup_output.$$ 2>&1
        local end_time=$(date +%s.%N)
        
        # Calculate duration in milliseconds
        local duration=$(echo "($end_time - $start_time) * 1000" | bc -l 2>/dev/null || echo "0")
        
        if [[ $duration =~ ^[0-9]+\.?[0-9]*$ ]] && (( $(echo "$duration > 0" | bc -l 2>/dev/null || echo 0) )); then
            times+=($duration)
            echo "${duration}ms"
        else
            echo "Failed (timeout or error)"
        fi
        
        # Clean up temporary files
        [[ -f "/tmp/startup_output.$$" ]] && rm "/tmp/startup_output.$$"
    done
    
    # Calculate statistics
    if [[ ${#times[@]} -gt 0 ]]; then
        local total=0
        local min=${times[1]}
        local max=${times[1]}
        
        for time in "${times[@]}"; do
            total=$(echo "$total + $time" | bc -l)
            if (( $(echo "$time < $min" | bc -l) )); then
                min=$time
            fi
            if (( $(echo "$time > $max" | bc -l) )); then
                max=$time
            fi
        done
        
        local avg=$(echo "scale=1; $total / ${#times[@]}" | bc -l)
        
        echo
        echo "üìà Startup Time Statistics:"
        echo "  Successful measurements: ${#times[@]}/$iterations"
        echo "  Average: ${avg}ms"
        echo "  Minimum: ${min}ms"
        echo "  Maximum: ${max}ms"
        echo "  Range: $(echo "$max - $min" | bc -l)ms"
        
        # Store results for later use
        echo "$avg" > ~/.config/zsh/logs/baseline_avg_startup.txt
        echo "$min" > ~/.config/zsh/logs/baseline_min_startup.txt
        echo "$max" > ~/.config/zsh/logs/baseline_max_startup.txt
    else
        echo "‚ùå No successful measurements obtained"
    fi
    
    # Clean up
    [[ -f "$temp_rc" ]] && rm "$temp_rc"
    [[ -f "$results_file" ]] && rm "$results_file"
}

# Function to measure memory usage
measure_memory_usage() {
    echo
    echo "üíæ Measuring memory usage..."
    
    # Start a ZSH session and measure its memory usage
    local zsh_pid
    zsh -c 'echo $$; sleep 5' &
    zsh_pid=$!
    
    sleep 1  # Give ZSH time to fully start
    
    if ps -p $zsh_pid > /dev/null 2>&1; then
        # Get memory information (different commands for different systems)
        if command -v ps >/dev/null 2>&1; then
            local mem_info
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS
                mem_info=$(ps -o pid,rss,vsz -p $zsh_pid | tail -1)
                local rss=$(echo $mem_info | awk '{print $2}')  # KB
                local vsz=$(echo $mem_info | awk '{print $3}')  # KB
                echo "  RSS (Resident Set Size): $((rss))KB (~$((rss/1024))MB)"
                echo "  VSZ (Virtual Size): $((vsz))KB (~$((vsz/1024))MB)"
                
                # Store baseline memory usage
                echo "$rss" > ~/.config/zsh/logs/baseline_memory_rss.txt
                echo "$vsz" > ~/.config/zsh/logs/baseline_memory_vsz.txt
            else
                # Linux
                mem_info=$(ps -o pid,rss,vsz,pmem -p $zsh_pid | tail -1)
                echo "  Memory info: $mem_info"
            fi
        fi
        
        # Kill the test ZSH process
        kill $zsh_pid 2>/dev/null
        wait $zsh_pid 2>/dev/null
    else
        echo "  ‚ùå Could not measure memory usage (ZSH process not found)"
    fi
}

# Function to analyze current configuration
analyze_configuration() {
    echo
    echo "üîç Configuration analysis..."
    
    local config_dir="$HOME/.config/zsh"
    local total_files=0
    local total_lines=0
    local total_size=0
    
    echo "  Configuration directory: $config_dir"
    
    # Count files and lines
    while IFS= read -r -d '' file; do
        if [[ -f "$file" && "$file" == *.zsh ]]; then
            local lines=$(wc -l < "$file" 2>/dev/null || echo 0)
            local size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
            
            ((total_files++))
            ((total_lines += lines))
            ((total_size += size))
            
            echo "    $(basename "$file"): $lines lines, ${size} bytes"
        fi
    done < <(find "$config_dir" -name "*.zsh" -type f -print0)
    
    echo
    echo "  üìä Configuration totals:"
    echo "    Total files: $total_files"
    echo "    Total lines: $total_lines"
    echo "    Total size: $total_size bytes (~$((total_size/1024))KB)"
    
    # Store configuration metrics
    echo "$total_files" > ~/.config/zsh/logs/baseline_config_files.txt
    echo "$total_lines" > ~/.config/zsh/logs/baseline_config_lines.txt
    echo "$total_size" > ~/.config/zsh/logs/baseline_config_size.txt
    
    # Count plugins if using a plugin manager
    if [[ -d ~/.config/zsh/plugins ]]; then
        local plugin_count=$(find ~/.config/zsh/plugins -maxdepth 1 -type d | wc -l)
        echo "    Plugin directories: $((plugin_count - 1))"  # Subtract 1 for the plugins dir itself
    fi
    
    # Check for common performance bottlenecks
    echo
    echo "  üîç Potential performance bottlenecks:"
    grep -n "eval.*direnv\|ssh-agent\|defaults write" ~/.config/zsh/**/*.zsh 2>/dev/null | while read -r line; do
        echo "    Found: $line"
    done
}

# Function to capture system information
capture_system_info() {
    echo
    echo "üñ•Ô∏è  System information..."
    echo "  OS: $(uname -s)"
    echo "  Version: $(uname -r)"
    echo "  Architecture: $(uname -m)"
    echo "  ZSH version: $ZSH_VERSION"
    echo "  Date: $(date)"
    
    if command -v sw_vers >/dev/null 2>&1; then
        echo "  macOS version: $(sw_vers -productVersion)"
    fi
    
    # Store system info
    {
        echo "OS=$(uname -s)"
        echo "VERSION=$(uname -r)"
        echo "ARCH=$(uname -m)"
        echo "ZSH_VERSION=$ZSH_VERSION"
        echo "DATE=$(date)"
        [[ -x "$(command -v sw_vers)" ]] && echo "MACOS_VERSION=$(sw_vers -productVersion)"
    } > ~/.config/zsh/logs/baseline_system_info.txt
}

# Main execution
main() {
    capture_system_info
    analyze_configuration
    measure_startup_time 10
    measure_memory_usage
    
    echo
    echo "‚úÖ Baseline performance measurement complete!"
    echo "üìä Results saved in: ~/.config/zsh/logs/"
    echo "üìÑ Detailed log: $_log_file"
    echo
    echo "==============================================================================" 
    echo "Baseline Performance Summary:"
    if [[ -f ~/.config/zsh/logs/baseline_avg_startup.txt ]]; then
        local avg_startup=$(cat ~/.config/zsh/logs/baseline_avg_startup.txt)
        echo "Average startup time: ${avg_startup}ms"
    fi
    if [[ -f ~/.config/zsh/logs/baseline_memory_rss.txt ]]; then
        local rss=$(cat ~/.config/zsh/logs/baseline_memory_rss.txt)
        echo "Memory usage (RSS): $((rss/1024))MB"
    fi
    echo "=============================================================================="
}

# Restore working directory on exit
trap "cd '$_original_pwd'" EXIT

# Execute main function
main "$@"
