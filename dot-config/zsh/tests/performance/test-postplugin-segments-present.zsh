#!/usr/bin/env zsh
# test-postplugin-segments-present.zsh
# Compliant with [${HOME}/dotfiles/dot-config/ai/guidelines.md](${HOME}/dotfiles/dot-config/ai/guidelines.md) v900f08def0e6f7959ffd283aebb73b625b3473f5e49c57e861c6461b50a62ef2
#
# PURPOSE:
#   Validate that perf-current.json contains a populated post_plugin_segments breakdown
#   when segment instrumentation is available. Ensures at least one segment entry with
#   label + cold/warm/mean fields, and non-negative numeric values.
#
# EXIT CODES:
#   0 PASS
#   1 FAIL
#   2 SKIP (metrics file or segments not yet available)
#
# DEPENDENCIES:
#   - perf-current.json generated by tools/perf-capture.zsh
#   - Standard POSIX utilities (grep, sed, awk); no jq requirement.
#
# INVARIANTS:
#   I1: perf-current.json exists
#   I2: segments_available == true
#   I3: post_plugin_segments array present
#   I4: At least one element with "label" key
#   I5: Each parsed object has mean_ms >= 0 (numeric)
#
set -euo pipefail
# Safe PATH bootstrap (avoid failures if PATH sanitized)
PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:${PATH:-}"

typeset -f zf::debug >/dev/null 2>&1 || zf::debug() { :; }

ZDOTDIR="${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}"

# Locate metrics directory (prefer redesignv2)
if [[ -d "${ZDOTDIR}/docs/redesignv2/artifacts/metrics" ]]; then
  METRICS_DIR="${ZDOTDIR}/docs/redesignv2/artifacts/metrics"
elif [[ -d "${ZDOTDIR}/docs/redesign/metrics" ]]; then
  METRICS_DIR="${ZDOTDIR}/docs/redesign/metrics"
else
  echo "SKIP: metrics directory not found"
  exit 2
fi

METRICS_FILE="${METRICS_DIR}/perf-current.json"
if [[ ! -f "${METRICS_FILE}" ]]; then
  echo "SKIP: perf-current.json missing (run perf-capture.zsh first)"
  exit 2
fi

# Quick extractor helpers (tolerant of spacing, trims noise)
_extract_bool() {
  local key="$1"
  grep -E "\"${key}\"" "${METRICS_FILE}" 2>/dev/null | head -1 | sed 's/.*: *//; s/,//; s/[[:space:]]//g'
}

segments_available=$(_extract_bool "segments_available" || true)
if [[ "${segments_available}" != "true" ]]; then
  echo "SKIP: segments_available!=true (segments instrumentation not active yet)"
  exit 2
fi

# Verify the post_plugin_segments key is present
if ! grep -q '"post_plugin_segments"' "${METRICS_FILE}"; then
  echo "FAIL: post_plugin_segments key missing (I3)"
  exit 1
fi

# Extract raw line containing the array (array may be single line)
raw_array_line=$(grep '"post_plugin_segments"' "${METRICS_FILE}" | head -1 || true)
if [[ -z "${raw_array_line}" ]]; then
  echo "FAIL: Unable to extract post_plugin_segments array line (I3)"
  exit 1
fi

# Pull out JSON array content between first '[' after key and its matching ']'
array_content=$(printf "%s" "$raw_array_line" | sed -n 's/.*"post_plugin_segments"[[:space:]]*:[[:space:]]*\[\(.*\)\][[:space:]]*$/\1/p')

if [[ -z "${array_content}" ]]; then
  echo "FAIL: post_plugin_segments array empty or unparsable (I3)"
  exit 1
fi

# Split objects robustly: replace '},{' with newline to isolate objects
object_lines=$(printf "%s" "$array_content" | sed 's/},{/}\n{/g')

# Extract labels
labels=()
means=()
while IFS= read -r obj; do
  [[ -z "$obj" ]] && continue
  lbl=$(printf "%s" "$obj" | sed -n 's/.*"label"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')
  mean=$(printf "%s" "$obj" | sed -n 's/.*"mean_ms"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p')
  if [[ -n "$lbl" ]]; then
    labels+=("$lbl")
    means+=("${mean:-}")
  fi
done <<< "$object_lines"

segment_count=${#labels[@]}
if (( segment_count == 0 )); then
  echo "FAIL: No segment entries with label found (I4)"
  exit 1
fi

violations=()
for i in {1..$segment_count}; do
  l="${labels[i]}"
  m="${means[i]}"
  if [[ -z "$m" ]]; then
    violations+=("Segment '$l' missing mean_ms")
  elif ! [[ "$m" =~ ^[0-9]+$ ]]; then
    violations+=("Segment '$l' mean_ms not numeric ($m)")
  elif (( m < 0 )); then
    violations+=("Segment '$l' mean_ms negative ($m)")
  fi
done

if (( ${#violations[@]} > 0 )); then
  echo "FAIL: post_plugin_segments validation issues:"
  for v in "${violations[@]}"; do
    echo "  - $v"
  done
  echo ""
  echo "---- Raw Array Line ----"
  printf "%s\n" "$raw_array_line" | sed 's/^/  /'
  echo "------------------------"
  exit 1
fi

echo "PASS: post_plugin_segments present (segments=${segment_count}) with valid labels & mean_ms >= 0"
exit 0
