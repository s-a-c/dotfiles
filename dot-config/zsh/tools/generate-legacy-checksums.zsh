#!/usr/bin/env zsh
# generate-legacy-checksums.zsh
# Generate (or refresh) the legacy checksum snapshot for frozen legacy configuration prior to promotion.
# Usage: tools/generate-legacy-checksums.zsh [--force] [output-file]
# NOTE: Only run at an intentional promotion event. Normal CI should *verify* (verify-legacy-checksums.zsh) not regenerate.
# On success writes snapshot to:
#   - Preferred: docs/redesignv2/artifacts/checksums/legacy-checksums.sha256 (if redesignv2 exists)
#   - Fallback : docs/redesign/planning/legacy-checksums.sha256
# Or to a userâ€‘supplied path argument.
set -euo pipefail
ZDOTDIR=${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}
if [[ -d "$ZDOTDIR/docs/redesignv2/artifacts/checksums" ]]; then
    OUT_DEFAULT="$ZDOTDIR/docs/redesignv2/artifacts/checksums/legacy-checksums.sha256"
else
    OUT_DEFAULT="$ZDOTDIR/docs/redesign/planning/legacy-checksums.sha256"
fi
force=0
out=""
for arg in "$@"; do
    case $arg in
        --force) force=1 ;;
        *) out=$arg ;;
    esac
done
[[ -z $out ]] && out=$OUT_DEFAULT
if [[ -f $out && $force -ne 1 ]]; then
    print -u2 "Refusing to overwrite existing snapshot without --force: $out"
    exit 2
fi
# Collect files: .zshrc + legacy pre & post plugin trees (not redesign dirs)
cd "$ZDOTDIR"
legacy_files=()
legacy_files+=( .zshrc )
legacy_files+=( .zshrc.pre-plugins.d/*.zsh(N) )
legacy_files+=( .zshrc.d/*.zsh(N) )
if (( ${#legacy_files[@]} == 0 )); then
    print -u2 "No legacy files found"
    exit 3
fi
# Write header
{
    print '# Legacy Checksums Snapshot'
    print "# Date: $(date +%Y-%m-%d)"
    print '# Algorithm: SHA256'
    print '# Scope: .zshrc, .zshrc.pre-plugins.d/*.zsh, .zshrc.d/*.zsh'
    print '# Generated by tools/generate-legacy-checksums.zsh (paired with verify-legacy-checksums.zsh)'
    print ''
    print '## File Checksums'
} > "$out.tmp"
for f in ${(on)legacy_files}; do
    [[ -f $f ]] || continue
    shasum -a 256 -- "$f" >> "$out.tmp"
done
mv "$out.tmp" "$out"
print "Wrote legacy checksum snapshot: $out"
