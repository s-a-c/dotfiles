#!/usr/bin/env zsh
# ==============================================================================
# ZSH Configuration: Weekly Security Maintenance Cron Setup
# ==============================================================================
# Purpose: Setup and manage weekly security maintenance cron job with proper
#          environment configuration, logging, and notification setup.
#
# Author: ZSH Configuration Management System
# Created: 2025-08-21
# Version: 1.0
# Usage: ./setup-weekly-cron [install|uninstall|status]
# UPDATED: Consistent with .zshenv configuration
# ==============================================================================

# Source .zshenv to ensure consistent environment variables
[[ -f "${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}/.zshenv" ]] && source "${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}/.zshenv"

ZDOTDIR="${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}"
MAINTENANCE_SCRIPT="$ZDOTDIR/tools/weekly-security-maintenance"
CRON_COMMENT="# ZSH Weekly Security Maintenance"

# Default cron schedule: Sunday at 2:00 AM
DEFAULT_CRON_SCHEDULE="0 2 * * 0"

# Use zsh_debug_echo from .zshenv if available
if declare -f zsh_debug_echo >/dev/null 2>&1; then
    zsh_debug_echo "# [setup-weekly-cron] Setting up weekly cron maintenance"
fi

show_help() {
    cat << EOF
ZSH Weekly Security Maintenance Cron Setup

USAGE:
    $0 [COMMAND] [OPTIONS]

COMMANDS:
    install     Install weekly security maintenance cron job
    uninstall   Remove weekly security maintenance cron job
    status      Show current cron job status
    test        Run maintenance script once for testing

OPTIONS:
    --schedule "CRON_EXPR"    Custom cron schedule (default: "0 2 * * 0" - Sunday 2 AM)
    --notification METHOD     Notification method (console,log,email,macos)
    --email EMAIL            Email address for notifications
    --help                   Show this help

EXAMPLES:
    $0 install                                    # Install with defaults
    $0 install --schedule "0 3 * * 1"           # Install for Monday 3 AM
    $0 install --email user@example.com         # Install with email notifications
    $0 uninstall                                 # Remove cron job
    $0 status                                    # Check current status
    $0 test                                      # Test run maintenance

NOTIFICATION METHODS:
    console     Console output (always enabled)
    log         Log file notifications
    email       Email notifications (requires mail command)
    macos       macOS notification center

LOG LOCATIONS:
    Weekly logs:    $ZDOTDIR/logs/maintenance/weekly-maintenance-*.log
    Summary logs:   $ZDOTDIR/logs/maintenance/weekly-summary.log
    Notifications:  $ZDOTDIR/logs/maintenance/notifications.log

EOF
}

install_cron_job() {
    local schedule="${1:-$DEFAULT_CRON_SCHEDULE}"
    local notification_methods="${2:-console,log}"
    local user_email="${3:-$(git config user.email 2>/dev/null || zsh_debug_echo "$USER@$(hostname)")}"

        zsh_debug_echo "Installing weekly security maintenance cron job..."
        zsh_debug_echo "Schedule: $schedule"
        zsh_debug_echo "Notifications: $notification_methods"
        zsh_debug_echo "Email: $user_email"
        zsh_debug_echo "Script: $MAINTENANCE_SCRIPT"

    # Check if maintenance script exists
    if [[ ! -f "$MAINTENANCE_SCRIPT" ]]; then
            zsh_debug_echo "ERROR: Maintenance script not found: $MAINTENANCE_SCRIPT"
        return 1
    fi

    # Check if maintenance script is executable
    if [[ ! -x "$MAINTENANCE_SCRIPT" ]]; then
            zsh_debug_echo "ERROR: Maintenance script is not executable: $MAINTENANCE_SCRIPT"
            zsh_debug_echo "Run: chmod +x '$MAINTENANCE_SCRIPT'"
        return 1
    fi

    # Create cron job entry
    local cron_entry="$CRON_COMMENT
$schedule cd '$ZDOTDIR' && ZDOTDIR='$ZDOTDIR' USER_EMAIL='$user_email' NOTIFICATION_METHODS='$notification_methods' '$MAINTENANCE_SCRIPT' >> '$ZDOTDIR/logs/maintenance/cron.log' 2>&1"

    # Remove existing cron job if present
    crontab -l 2>/dev/null | grep -v "$CRON_COMMENT" | grep -v "$MAINTENANCE_SCRIPT" > /tmp/crontab.tmp

    # Add new cron job
        zsh_debug_echo "$cron_entry" >> /tmp/crontab.tmp

    # Install new crontab
    if crontab /tmp/crontab.tmp; then
        rm -f /tmp/crontab.tmp
            zsh_debug_echo "✅ Weekly security maintenance cron job installed successfully!"
            zsh_debug_echo ""
            zsh_debug_echo "Next run: $(date -j -f "%u %H %M" "$(echo "$schedule" | awk '{print $5, $2, $1}')" "+%A, %B %d at %H:%M" 2>/dev/null || zsh_debug_echo "Check with 'crontab -l'")"
            zsh_debug_echo ""
            zsh_debug_echo "To test the setup, run:"
            zsh_debug_echo "  $0 test"
            zsh_debug_echo ""
            zsh_debug_echo "To check logs:"
            zsh_debug_echo "  tail -f '$ZDOTDIR/logs/maintenance/weekly-summary.log'"
        return 0
    else
        rm -f /tmp/crontab.tmp
            zsh_debug_echo "ERROR: Failed to install cron job"
        return 1
    fi
}

uninstall_cron_job() {
        zsh_debug_echo "Removing weekly security maintenance cron job..."

    # Remove cron job entries
    if crontab -l 2>/dev/null | grep -v "$CRON_COMMENT" | grep -v "$MAINTENANCE_SCRIPT" | crontab -; then
            zsh_debug_echo "✅ Weekly security maintenance cron job removed successfully!"
        return 0
    else
            zsh_debug_echo "⚠️  No cron job found or failed to remove"
        return 1
    fi
}

show_status() {
        zsh_debug_echo "Weekly Security Maintenance Cron Job Status"
        zsh_debug_echo "============================================"
        zsh_debug_echo "Maintenance script: $MAINTENANCE_SCRIPT"

    if [[ -f "$MAINTENANCE_SCRIPT" ]]; then
            zsh_debug_echo "Script status: ✅ Found"
        if [[ -x "$MAINTENANCE_SCRIPT" ]]; then
                zsh_debug_echo "Executable: ✅ Yes"
        else
                zsh_debug_echo "Executable: ❌ No (run: chmod +x '$MAINTENANCE_SCRIPT')"
        fi
    else
            zsh_debug_echo "Script status: ❌ Not found"
    fi

        zsh_debug_echo ""
        zsh_debug_echo "Current cron jobs:"
    local cron_jobs=$(crontab -l 2>/dev/null | grep -E "$CRON_COMMENT|$MAINTENANCE_SCRIPT")
    if [[ -n "$cron_jobs" ]]; then
            zsh_debug_echo "$cron_jobs"
    else
            zsh_debug_echo "❌ No weekly security maintenance cron job found"
    fi

        zsh_debug_echo ""
        zsh_debug_echo "Log directories:"
    local log_dir="$ZDOTDIR/logs/maintenance"
    if [[ -d "$log_dir" ]]; then
            zsh_debug_echo "✅ Log directory exists: $log_dir"
        local log_count=$(find "$log_dir" -name "*.log" -type f | wc -l)
            zsh_debug_echo "   Log files: $log_count"

        if [[ -f "$log_dir/weekly-summary.log" ]]; then
                zsh_debug_echo "   Latest summary:"
            tail -3 "$log_dir/weekly-summary.log" 2>/dev/null | sed 's/^/     /'
        fi
    else
            zsh_debug_echo "⚠️  Log directory not found: $log_dir"
    fi
}

test_maintenance() {
        zsh_debug_echo "Running weekly security maintenance test..."
        zsh_debug_echo "=========================================="

    if [[ ! -f "$MAINTENANCE_SCRIPT" ]]; then
            zsh_debug_echo "ERROR: Maintenance script not found: $MAINTENANCE_SCRIPT"
        return 1
    fi

    if [[ ! -x "$MAINTENANCE_SCRIPT" ]]; then
            zsh_debug_echo "ERROR: Maintenance script is not executable"
            zsh_debug_echo "Run: chmod +x '$MAINTENANCE_SCRIPT'"
        return 1
    fi

    # Run maintenance script with test notification
        zsh_debug_echo "Executing: $MAINTENANCE_SCRIPT"
        zsh_debug_echo ""

    cd "$ZDOTDIR"
    ZDOTDIR="$ZDOTDIR" \
    USER_EMAIL="$(git config user.email 2>/dev/null || zsh_debug_echo "$USER@$(hostname)")" \
    NOTIFICATION_METHODS="console,log" \
    "$MAINTENANCE_SCRIPT"

    local exit_code=$?

        zsh_debug_echo ""
        zsh_debug_echo "Test completed with exit code: $exit_code"

    if [[ $exit_code -eq 0 ]]; then
            zsh_debug_echo "✅ Maintenance script executed successfully!"
    else
            zsh_debug_echo "⚠️  Maintenance script completed with issues (exit code: $exit_code)"
    fi

        zsh_debug_echo ""
        zsh_debug_echo "Check logs at:"
        zsh_debug_echo "  $ZDOTDIR/logs/maintenance/"

    return $exit_code
}

main() {
    local command="${1:-help}"
    local schedule="$DEFAULT_CRON_SCHEDULE"
    local notification_methods="console,log"
    local user_email="$(git config user.email 2>/dev/null || zsh_debug_echo "$USER@$(hostname)")"

    # Parse arguments
    shift
    while [[ $# -gt 0 ]]; do
        case $1 in
            --schedule)
                schedule="$2"
                shift 2
                ;;
            --notification)
                notification_methods="$2"
                shift 2
                ;;
            --email)
                user_email="$2"
                notification_methods="$notification_methods,email"
                shift 2
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                    zsh_debug_echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done

    case "$command" in
        install)
            install_cron_job "$schedule" "$notification_methods" "$user_email"
            ;;
        uninstall)
            uninstall_cron_job
            ;;
        status)
            show_status
            ;;
        test)
            test_maintenance
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
                zsh_debug_echo "Unknown command: $command"
                zsh_debug_echo "Use '$0 --help' for usage information"
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"

# ==============================================================================
# END: Weekly Security Maintenance Cron Setup
# ==============================================================================
